<!DOCTYPE html>
<html lang="en" data-theme="system">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRM Dashboard - Wiseguy</title>
    <link rel="stylesheet" href="/styles.css">
    <script src="/theme.js" defer></script>
    <style>
        .crm-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .crm-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .crm-tabs {
            display: flex;
            gap: 8px;
            margin-bottom: 24px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .crm-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            border-bottom: 3px solid transparent;
            color: var(--text-secondary);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .crm-tab.active {
            color: var(--accent-primary);
            border-bottom-color: var(--accent-primary);
        }
        
        .crm-tab:hover {
            color: var(--text-primary);
        }
        
        .crm-content {
            display: none;
        }
        
        .crm-content.active {
            display: block;
        }
        
        .crm-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 24px;
        }
        
        .crm-card {
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .crm-card-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .crm-card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .crm-card-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-add {
            background: var(--accent-primary);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }
        
        .btn-add:hover {
            background: var(--accent-primary-dark);
        }
        
        .crm-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .crm-item {
            padding: 12px;
            border: 1px solid var(--border-secondary);
            border-radius: 8px;
            margin-bottom: 8px;
            background: var(--bg-secondary);
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .crm-item:hover {
            border-color: var(--accent-primary);
            background: var(--bg-primary);
        }
        
        .crm-item-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .crm-item-title {
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .crm-item-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }
        
        .crm-item-actions {
            display: flex;
            gap: 4px;
        }
        
        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .btn-edit {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        .pipeline-stages {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }
        
        .pipeline-stage {
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 8px;
            padding: 16px;
            text-align: center;
        }
        
        .pipeline-stage-header {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--text-primary);
        }
        
        .pipeline-stage-count {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .pipeline-stage-value {
            font-size: 14px;
            color: var(--text-secondary);
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal-content {
            background-color: var(--bg-primary);
            margin: 5% auto;
            padding: 0;
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .close {
            color: var(--text-secondary);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: var(--text-primary);
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .form-textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
            min-height: 100px;
            resize: vertical;
        }
        
        .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .modal-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            padding: 20px;
            border-top: 1px solid var(--border-primary);
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-secondary {
            background: var(--bg-secondary);
            color: var(--text-primary);
            border: 1px solid var(--border-primary);
        }
        
        .btn-primary:hover {
            background: var(--accent-primary-dark);
        }
        
        .btn-secondary:hover {
            background: var(--bg-primary);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }
        
        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }
    </style>
</head>
<body>
    <div class="crm-container">
        <div class="crm-header">
            <h1>CRM Dashboard</h1>
            <div class="crm-header-actions">
                <button class="btn btn-primary" onclick="openCreateModal('organization')">New Organization</button>
            </div>
        </div>
        
        <div class="crm-tabs">
            <button class="crm-tab active" onclick="switchTab('overview')">Overview</button>
            <button class="crm-tab" onclick="switchTab('organizations')">Organizations</button>
            <button class="crm-tab" onclick="switchTab('contacts')">Contacts</button>
            <button class="crm-tab" onclick="switchTab('activities')">Activities</button>
            <button class="crm-tab" onclick="switchTab('notes')">Notes</button>
            <button class="crm-tab" onclick="switchTab('pipeline')">Pipeline</button>
        </div>
        
        <!-- Overview Tab -->
        <div id="overview" class="crm-content active">
            <div class="crm-grid">
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Pipeline Summary</h3>
                    </div>
                    <div id="pipelineSummary" class="loading">Loading...</div>
                </div>
                
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Recent Activities</h3>
                    </div>
                    <div id="recentActivities" class="loading">Loading...</div>
                </div>
                
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Top Organizations</h3>
                    </div>
                    <div id="topOrganizations" class="loading">Loading...</div>
                </div>
            </div>
        </div>
        
        <!-- Organizations Tab -->
        <div id="organizations" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Organizations</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('organization')">Add Organization</button>
                    </div>
                </div>
                <div id="organizationsList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Contacts Tab -->
        <div id="contacts" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Contacts</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('contact')">Add Contact</button>
                    </div>
                </div>
                <div id="contactsList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Activities Tab -->
        <div id="activities" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Activities</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('activity')">Add Activity</button>
                    </div>
                </div>
                <div id="activitiesList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Notes Tab -->
        <div id="notes" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Notes</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('note')">Add Note</button>
                    </div>
                </div>
                <div id="notesList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Pipeline Tab -->
        <div id="pipeline" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Sales Pipeline</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('pipeline')">Add Pipeline Entry</button>
                    </div>
                </div>
                <div id="pipelineStages" class="pipeline-stages loading">Loading...</div>
                <div id="pipelineEntries" class="crm-list loading">Loading...</div>
            </div>
        </div>
    </div>
    
    <!-- Modals -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Create New</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Modal content will be dynamically loaded -->
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button class="btn btn-primary" onclick="saveItem()">Save</button>
            </div>
        </div>
    </div>
    
    <script>
        let currentTab = 'overview';
        let currentModalType = null;
        let organizations = [];
        let contacts = [];
        let activities = [];
        let notes = [];
        let pipelineEntries = [];
        let pipelineStages = {};
        
        // Initialize CRM Dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
        });
        
        function switchTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.crm-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Update content
            document.querySelectorAll('.crm-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            currentTab = tabName;
            
            // Load data for the selected tab
            switch(tabName) {
                case 'organizations':
                    loadOrganizations();
                    break;
                case 'contacts':
                    loadContacts();
                    break;
                case 'activities':
                    loadActivities();
                    break;
                case 'notes':
                    loadNotes();
                    break;
                case 'pipeline':
                    loadPipeline();
                    break;
            }
        }
        
        function loadDashboardData() {
            loadPipelineSummary();
            loadRecentActivities();
            loadTopOrganizations();
        }
        
        function loadPipelineSummary() {
            fetch('/api/crm/pipeline/summary')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('pipelineSummary');
                    container.innerHTML = `
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--accent-primary);">
                                $${data.total_value.toLocaleString()}
                            </div>
                            <div style="color: var(--text-secondary); margin-bottom: 16px;">
                                Total Pipeline Value
                            </div>
                            <div style="font-size: 18px; font-weight: 600;">
                                ${data.total_entries} Active Deals
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error loading pipeline summary:', error);
                    document.getElementById('pipelineSummary').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadRecentActivities() {
            fetch('/api/crm/activities')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('recentActivities');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No recent activities</div>';
                        return;
                    }
                    
                    const recentActivities = data.slice(0, 5);
                    container.innerHTML = recentActivities.map(activity => `
                        <div class="crm-item">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${activity.subject}</div>
                                <div class="crm-item-meta">${formatDate(activity.date)}</div>
                            </div>
                            <div style="color: var(--text-secondary); font-size: 14px;">
                                ${activity.type} - ${activity.description}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading recent activities:', error);
                    document.getElementById('recentActivities').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadTopOrganizations() {
            fetch('/api/crm/organizations')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('topOrganizations');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No organizations</div>';
                        return;
                    }
                    
                    const topOrgs = data.slice(0, 5);
                    container.innerHTML = topOrgs.map(org => `
                        <div class="crm-item">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${org.name}</div>
                                <div class="crm-item-meta">${org.industry || 'N/A'}</div>
                            </div>
                            <div style="color: var(--text-secondary); font-size: 14px;">
                                ${org.employee_count ? org.employee_count + ' employees' : 'N/A'}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading top organizations:', error);
                    document.getElementById('topOrganizations').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadOrganizations() {
            fetch('/api/crm/organizations')
                .then(response => response.json())
                .then(data => {
                    organizations = data;
                    const container = document.getElementById('organizationsList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No organizations found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(org => `
                        <div class="crm-item" onclick="editItem('organization', '${org.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${org.name}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('organization', '${org.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('organization', '${org.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${org.industry || 'N/A'} • ${org.employee_count ? org.employee_count + ' employees' : 'N/A'}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading organizations:', error);
                    document.getElementById('organizationsList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadContacts() {
            fetch('/api/crm/contacts')
                .then(response => response.json())
                .then(data => {
                    contacts = data;
                    const container = document.getElementById('contactsList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No contacts found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(contact => `
                        <div class="crm-item" onclick="editItem('contact', '${contact.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${contact.first_name} ${contact.last_name}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('contact', '${contact.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('contact', '${contact.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${contact.title || 'N/A'} • ${contact.email || 'N/A'}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading contacts:', error);
                    document.getElementById('contactsList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadActivities() {
            fetch('/api/crm/activities')
                .then(response => response.json())
                .then(data => {
                    activities = data;
                    const container = document.getElementById('activitiesList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No activities found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(activity => `
                        <div class="crm-item" onclick="editItem('activity', '${activity.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${activity.subject}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('activity', '${activity.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('activity', '${activity.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${activity.type} • ${formatDate(activity.date)}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading activities:', error);
                    document.getElementById('activitiesList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadNotes() {
            fetch('/api/crm/notes')
                .then(response => response.json())
                .then(data => {
                    notes = data;
                    const container = document.getElementById('notesList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No notes found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(note => `
                        <div class="crm-item" onclick="editItem('note', '${note.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${note.title}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('note', '${note.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('note', '${note.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${note.category || 'N/A'} • ${formatDate(note.created_at)}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading notes:', error);
                    document.getElementById('notesList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadPipeline() {
            Promise.all([
                fetch('/api/crm/pipeline/stages').then(r => r.json()),
                fetch('/api/crm/pipeline/entries').then(r => r.json())
            ]).then(([stages, entries]) => {
                pipelineStages = stages;
                pipelineEntries = entries;
                
                // Load pipeline stages
                const stagesContainer = document.getElementById('pipelineStages');
                stagesContainer.innerHTML = Object.entries(stages).map(([key, stage]) => `
                    <div class="pipeline-stage" style="border-left: 4px solid ${stage.color}">
                        <div class="pipeline-stage-header">${stage.name}</div>
                        <div class="pipeline-stage-count">
                            ${entries.filter(entry => entry.stage === key).length}
                        </div>
                        <div class="pipeline-stage-value">
                            $${entries.filter(entry => entry.stage === key).reduce((sum, entry) => sum + (entry.value || 0), 0).toLocaleString()}
                        </div>
                    </div>
                `).join('');
                
                // Load pipeline entries
                const entriesContainer = document.getElementById('pipelineEntries');
                if (entries.length === 0) {
                    entriesContainer.innerHTML = '<div class="empty-state">No pipeline entries found</div>';
                    return;
                }
                
                entriesContainer.innerHTML = entries.map(entry => `
                    <div class="crm-item" onclick="editItem('pipeline', '${entry.id}')">
                        <div class="crm-item-header">
                            <div class="crm-item-title">$${entry.value ? entry.value.toLocaleString() : '0'}</div>
                            <div class="crm-item-actions">
                                <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('pipeline', '${entry.id}')">Edit</button>
                                <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('pipeline', '${entry.id}')">Delete</button>
                            </div>
                        </div>
                        <div class="crm-item-meta">
                            ${stages[entry.stage]?.name || entry.stage} • ${entry.expected_close_date ? formatDate(entry.expected_close_date) : 'No close date'}
                        </div>
                    </div>
                `).join('');
            }).catch(error => {
                console.error('Error loading pipeline:', error);
                document.getElementById('pipelineStages').innerHTML = '<div class="empty-state">Error loading data</div>';
                document.getElementById('pipelineEntries').innerHTML = '<div class="empty-state">Error loading data</div>';
            });
        }
        
        function openCreateModal(type) {
            currentModalType = type;
            const modal = document.getElementById('createModal');
            const title = document.getElementById('modalTitle');
            const body = document.getElementById('modalBody');
            
            title.textContent = `Create New ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            body.removeAttribute('data-editing-id');
            
            loadFormTemplate(type);
            modal.style.display = 'block';
        }
        
        function loadFormTemplate(type, item = null) {
            const body = document.getElementById('modalBody');
            
            switch(type) {
                case 'organization':
                    body.innerHTML = getOrganizationForm();
                    if (item) {
                        populateOrganizationForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'contact':
                    body.innerHTML = getContactForm();
                    if (item) {
                        populateContactForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'activity':
                    body.innerHTML = getActivityForm();
                    if (item) {
                        populateActivityForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'note':
                    body.innerHTML = getNoteForm();
                    if (item) {
                        populateNoteForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'pipeline':
                    body.innerHTML = getPipelineForm();
                    if (item) {
                        populatePipelineForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
            }
        }
        
        function getOrganizationForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Organization Name *</label>
                    <input type="text" id="orgName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Industry</label>
                    <input type="text" id="orgIndustry" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Website</label>
                    <input type="url" id="orgWebsite" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" id="orgEmail" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Phone</label>
                    <input type="tel" id="orgPhone" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Address</label>
                    <textarea id="orgAddress" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Annual Revenue</label>
                    <input type="number" id="orgRevenue" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Employee Count</label>
                    <input type="number" id="orgEmployees" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="orgNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function populateOrganizationForm(org) {
            document.getElementById('orgName').value = org.name || '';
            document.getElementById('orgIndustry').value = org.industry || '';
            document.getElementById('orgWebsite').value = org.website || '';
            document.getElementById('orgEmail').value = org.email || '';
            document.getElementById('orgPhone').value = org.phone || '';
            document.getElementById('orgAddress').value = org.address || '';
            document.getElementById('orgRevenue').value = org.annual_revenue || '';
            document.getElementById('orgEmployees').value = org.employee_count || '';
            document.getElementById('orgNotes').value = org.notes || '';
        }
        
        function getContactForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Organization</label>
                    <select id="contactOrg" class="form-select">
                        <option value="">Select Organization</option>
                        ${organizations.map(org => `<option value="${org.id}">${org.name}</option>`).join('')}
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">First Name *</label>
                    <input type="text" id="contactFirstName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Last Name *</label>
                    <input type="text" id="contactLastName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Title</label>
                    <input type="text" id="contactTitle" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" id="contactEmail" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Phone</label>
                    <input type="tel" id="contactPhone" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Mobile</label>
                    <input type="tel" id="contactMobile" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">LinkedIn</label>
                    <input type="url" id="contactLinkedIn" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Primary Contact</label>
                    <input type="checkbox" id="contactPrimary">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="contactNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function getActivityForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Subject *</label>
                    <input type="text" id="activitySubject" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Type</label>
                    <select id="activityType" class="form-select">
                        <option value="call">Phone Call</option>
                        <option value="email">Email</option>
                        <option value="meeting">Meeting</option>
                        <option value="presentation">Presentation</option>
                        <option value="proposal">Proposal</option>
                        <option value="follow_up">Follow Up</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea id="activityDescription" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Date</label>
                    <input type="datetime-local" id="activityDate" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Duration (minutes)</label>
                    <input type="number" id="activityDuration" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Outcome</label>
                    <textarea id="activityOutcome" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Next Action</label>
                    <input type="text" id="activityNextAction" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Next Action Date</label>
                    <input type="date" id="activityNextActionDate" class="form-input">
                </div>
            `;
        }
        
        function getNoteForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Title *</label>
                    <input type="text" id="noteTitle" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Content</label>
                    <textarea id="noteContent" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Category</label>
                    <select id="noteCategory" class="form-select">
                        <option value="general">General</option>
                        <option value="meeting">Meeting</option>
                        <option value="proposal">Proposal</option>
                        <option value="follow_up">Follow Up</option>
                        <option value="competition">Competition</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Private Note</label>
                    <input type="checkbox" id="notePrivate">
                </div>
            `;
        }
        
        function getPipelineForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Stage *</label>
                    <select id="pipelineStage" class="form-select" required>
                        ${Object.entries(pipelineStages).map(([key, stage]) => 
                            `<option value="${key}">${stage.name} (${stage.probability}%)</option>`
                        ).join('')}
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Value *</label>
                    <input type="number" id="pipelineValue" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Currency</label>
                    <select id="pipelineCurrency" class="form-select">
                        <option value="USD">USD</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Expected Close Date</label>
                    <input type="date" id="pipelineCloseDate" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="pipelineNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function populateContactForm(contact) {
            document.getElementById('contactOrg').value = contact.organization_id || '';
            document.getElementById('contactFirstName').value = contact.first_name || '';
            document.getElementById('contactLastName').value = contact.last_name || '';
            document.getElementById('contactTitle').value = contact.title || '';
            document.getElementById('contactEmail').value = contact.email || '';
            document.getElementById('contactPhone').value = contact.phone || '';
            document.getElementById('contactMobile').value = contact.mobile || '';
            document.getElementById('contactLinkedIn').value = contact.linkedin || '';
            document.getElementById('contactPrimary').checked = contact.is_primary || false;
            document.getElementById('contactNotes').value = contact.notes || '';
        }
        
        function populateActivityForm(activity) {
            document.getElementById('activitySubject').value = activity.subject || '';
            document.getElementById('activityType').value = activity.type || '';
            document.getElementById('activityDescription').value = activity.description || '';
            document.getElementById('activityDate').value = activity.date ? activity.date.split('T')[0] : '';
            document.getElementById('activityDuration').value = activity.duration || '';
            document.getElementById('activityOutcome').value = activity.outcome || '';
            document.getElementById('activityNextAction').value = activity.next_action || '';
            document.getElementById('activityNextActionDate').value = activity.next_action_date ? activity.next_action_date.split('T')[0] : '';
        }
        
        function populateNoteForm(note) {
            document.getElementById('noteTitle').value = note.title || '';
            document.getElementById('noteContent').value = note.content || '';
            document.getElementById('noteCategory').value = note.category || '';
            document.getElementById('notePrivate').checked = note.is_private || false;
        }
        
        function populatePipelineForm(entry) {
            document.getElementById('pipelineStage').value = entry.stage || '';
            document.getElementById('pipelineValue').value = entry.value || '';
            document.getElementById('pipelineCurrency').value = entry.currency || 'USD';
            document.getElementById('pipelineCloseDate').value = entry.expected_close_date ? entry.expected_close_date.split('T')[0] : '';
            document.getElementById('pipelineNotes').value = entry.notes || '';
        }
        
        function closeModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('modalBody').removeAttribute('data-editing-id');
            currentModalType = null;
        }
        
        function saveItem() {
            const data = getFormData();
            if (!data) return;
            
            // Check if we're editing an existing item
            const editingId = document.getElementById('modalBody').getAttribute('data-editing-id');
            let url = `/api/crm/${currentModalType}s`;
            let method = 'POST';
            
            if (editingId) {
                url = `/api/crm/${currentModalType}s/${editingId}`;
                method = 'PUT';
            }
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.error) {
                    alert('Error: ' + result.error);
                } else {
                    closeModal();
                    // Reload the current tab
                    switch(currentTab) {
                        case 'organizations':
                            loadOrganizations();
                            break;
                        case 'contacts':
                            loadContacts();
                            break;
                        case 'activities':
                            loadActivities();
                            break;
                        case 'notes':
                            loadNotes();
                            break;
                        case 'pipeline':
                            loadPipeline();
                            break;
                    }
                    loadDashboardData(); // Refresh overview
                }
            })
            .catch(error => {
                console.error('Error saving item:', error);
                alert('Error saving item');
            });
        }
        
        function getFormData() {
            switch(currentModalType) {
                case 'organization':
                    return {
                        name: document.getElementById('orgName').value,
                        industry: document.getElementById('orgIndustry').value,
                        website: document.getElementById('orgWebsite').value,
                        email: document.getElementById('orgEmail').value,
                        phone: document.getElementById('orgPhone').value,
                        address: document.getElementById('orgAddress').value,
                        annual_revenue: document.getElementById('orgRevenue').value,
                        employee_count: document.getElementById('orgEmployees').value,
                        notes: document.getElementById('orgNotes').value
                    };
                case 'contact':
                    return {
                        organization_id: document.getElementById('contactOrg').value,
                        first_name: document.getElementById('contactFirstName').value,
                        last_name: document.getElementById('contactLastName').value,
                        title: document.getElementById('contactTitle').value,
                        email: document.getElementById('contactEmail').value,
                        phone: document.getElementById('contactPhone').value,
                        mobile: document.getElementById('contactMobile').value,
                        linkedin: document.getElementById('contactLinkedIn').value,
                        is_primary: document.getElementById('contactPrimary').checked,
                        notes: document.getElementById('contactNotes').value
                    };
                case 'activity':
                    return {
                        subject: document.getElementById('activitySubject').value,
                        type: document.getElementById('activityType').value,
                        description: document.getElementById('activityDescription').value,
                        date: document.getElementById('activityDate').value,
                        duration: document.getElementById('activityDuration').value,
                        outcome: document.getElementById('activityOutcome').value,
                        next_action: document.getElementById('activityNextAction').value,
                        next_action_date: document.getElementById('activityNextActionDate').value
                    };
                case 'note':
                    return {
                        title: document.getElementById('noteTitle').value,
                        content: document.getElementById('noteContent').value,
                        category: document.getElementById('noteCategory').value,
                        is_private: document.getElementById('notePrivate').checked
                    };
                case 'pipeline':
                    return {
                        stage: document.getElementById('pipelineStage').value,
                        value: document.getElementById('pipelineValue').value,
                        currency: document.getElementById('pipelineCurrency').value,
                        expected_close_date: document.getElementById('pipelineCloseDate').value,
                        notes: document.getElementById('pipelineNotes').value
                    };
            }
        }
        
        function editItem(type, id) {
            currentModalType = type;
            const item = getItemById(type, id);
            if (!item) {
                alert('Item not found');
                return;
            }
            
            // Set modal title
            document.getElementById('modalTitle').textContent = `Edit ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            
            // Load form template and populate with data
            loadFormTemplate(type, item);
            
            // Show modal
            document.getElementById('createModal').style.display = 'block';
        }
        
        function getItemById(type, id) {
            switch(type) {
                case 'organization':
                    return organizations.find(org => org.id === id);
                case 'contact':
                    return contacts.find(contact => contact.id === id);
                case 'activity':
                    return activities.find(activity => activity.id === id);
                case 'note':
                    return notes.find(note => note.id === id);
                case 'pipeline':
                    return pipelineEntries.find(entry => entry.id === id);
                default:
                    return null;
            }
        }
        
        function deleteItem(type, id) {
            if (!confirm(`Are you sure you want to delete this ${type}?`)) {
                return;
            }
            
            fetch(`/api/crm/${type}s/${id}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Reload the current tab
                    switch(currentTab) {
                        case 'organizations':
                            loadOrganizations();
                            break;
                        case 'contacts':
                            loadContacts();
                            break;
                        case 'activities':
                            loadActivities();
                            break;
                        case 'notes':
                            loadNotes();
                            break;
                        case 'pipeline':
                            loadPipeline();
                            break;
                    }
                    loadDashboardData(); // Refresh overview
                } else {
                    alert('Error deleting item');
                }
            })
            .catch(error => {
                console.error('Error deleting item:', error);
                alert('Error deleting item');
            });
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('createModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
