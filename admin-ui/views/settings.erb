<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sync Services - Wizdocs</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            margin-bottom: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.8em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 1.2em;
            margin-bottom: 20px;
        }
        
        .nav-tabs {
            display: flex;
            background: rgba(255,255,255,0.1);
            border-radius: 8px;
            padding: 4px;
            margin-top: 20px;
        }
        
        .nav-tab {
            flex: 1;
            padding: 12px 20px;
            text-align: center;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.3s;
            font-weight: 500;
        }
        
        .nav-tab:hover, .nav-tab.active {
            background: rgba(255,255,255,0.2);
            color: white;
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .settings-card {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        }
        
        .settings-card h3 {
            font-size: 1.6em;
            margin-bottom: 20px;
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }
        
        .status-connected {
            background: #27ae60;
        }
        
        .status-disconnected {
            background: #e74c3c;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group input[type="password"] {
            font-family: monospace;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
            box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
            box-shadow: 0 2px 10px rgba(39, 174, 96, 0.3);
        }
        
        .btn-success:hover {
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.4);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            box-shadow: 0 2px 10px rgba(231, 76, 60, 0.3);
        }
        
        .btn-danger:hover {
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.4);
        }
        
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            font-weight: 500;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        
        .help-text {
            font-size: 0.9em;
            color: #666;
            margin-top: 5px;
        }
        
        .test-connection {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .connection-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 6px;
            font-weight: 500;
        }
        
        .connection-status.connected {
            background: #d4edda;
            color: #155724;
        }
        
        .connection-status.disconnected {
            background: #f8d7da;
            color: #721c24;
        }
        
        .instructions {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }
        
        .instructions h3 {
            margin-bottom: 15px;
            color: #2c3e50;
        }
        
        .instructions ol {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
            line-height: 1.6;
        }
        
        .instructions code {
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Sync Services</h1>
            <p>Configure Atlassian JIRA, Confluence, and Intercom API connections</p>
            
            <div class="nav-tabs">
                <a href="/" class="nav-tab">Dashboard</a>
                <a href="/tickets" class="nav-tab">Ticket Analysis</a>
                <a href="/audits" class="nav-tab">Veracity Audits</a>
                <a href="/settings" class="nav-tab active">Sync Services</a>
            </div>
        </div>
        
        <div class="instructions">
            <h3>ðŸ“‹ Setup Instructions</h3>
            <ol>
                <li><strong>JIRA Setup:</strong> Create an API token in your Atlassian account and configure the JIRA site URL</li>
                <li><strong>Intercom Setup:</strong> Generate an access token from your Intercom developer settings</li>
                <li><strong>Configuration:</strong> Copy <code>config.env.example</code> to <code>config.env</code> and fill in your credentials</li>
                <li><strong>Test:</strong> Use the test connection buttons below to verify your API access</li>
            </ol>
        </div>
        
        <div id="alerts"></div>
        
        <div class="settings-grid">
            <div class="settings-card">
                <h3>
                    <span class="status-indicator <%= @jira_connected ? 'status-connected' : 'status-disconnected' %>"></span>
                    JIRA Configuration
                </h3>
                
                <div class="connection-status <%= @jira_connected ? 'connected' : 'disconnected' %>">
                    <% if @jira_connected %>
                        âœ“ Connected to JIRA
                    <% else %>
                        âœ— Not connected to JIRA
                    <% end %>
                </div>
                
                <form id="jiraForm">
                    <div class="form-group">
                        <label for="jira_site">JIRA Site URL</label>
                        <input type="url" id="jira_site" name="jira_site" placeholder="https://your-domain.atlassian.net" value="<%= ENV['JIRA_SITE'] || '' %>">
                        <div class="help-text">Your JIRA Cloud instance URL</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="jira_username">Email Address</label>
                        <input type="email" id="jira_username" name="jira_username" placeholder="your-email@domain.com" value="<%= ENV['JIRA_USERNAME'] || '' %>">
                        <div class="help-text">The email address associated with your JIRA account</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="jira_api_token">API Token</label>
                        <input type="password" id="jira_api_token" name="jira_api_token" placeholder="Your JIRA API token">
                        <div class="help-text">Generate this in your Atlassian account settings</div>
                    </div>
                    
                    <div class="test-connection">
                        <button type="button" class="btn" onclick="testJiraConnection()">Test JIRA Connection</button>
                        <button type="button" class="btn btn-success" onclick="saveJiraConfig()">Save JIRA Config</button>
                    </div>
                </form>
            </div>
            
            <div class="settings-card">
                <h3>
                    <span class="status-indicator <%= @intercom_connected ? 'status-connected' : 'status-disconnected' %>"></span>
                    Intercom Configuration
                </h3>
                
                <div class="connection-status <%= @intercom_connected ? 'connected' : 'disconnected' %>">
                    <% if @intercom_connected %>
                        âœ“ Connected to Intercom
                    <% else %>
                        âœ— Not connected to Intercom
                    <% end %>
                </div>
                
                <form id="intercomForm">
                    <div class="form-group">
                        <label for="intercom_access_token">Access Token</label>
                        <input type="password" id="intercom_access_token" name="intercom_access_token" placeholder="Your Intercom access token">
                        <div class="help-text">Generate this in your Intercom developer settings</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="intercom_client_id">Client ID (Optional)</label>
                        <input type="text" id="intercom_client_id" name="intercom_client_id" placeholder="Your Intercom client ID" value="<%= ENV['INTERCOM_CLIENT_ID'] || '' %>">
                        <div class="help-text">Required for some advanced features</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="intercom_client_secret">Client Secret (Optional)</label>
                        <input type="password" id="intercom_client_secret" name="intercom_client_secret" placeholder="Your Intercom client secret">
                        <div class="help-text">Required for some advanced features</div>
                    </div>
                    
                    <div class="test-connection">
                        <button type="button" class="btn" onclick="testIntercomConnection()">Test Intercom Connection</button>
                        <button type="button" class="btn btn-success" onclick="saveIntercomConfig()">Save Intercom Config</button>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="settings-card">
            <h3>ðŸ”§ Application Settings</h3>
            
            <form id="appForm">
                <div class="form-group">
                    <label for="app_port">Application Port</label>
                    <input type="number" id="app_port" name="app_port" placeholder="3000" value="<%= ENV['PORT'] || '3000' %>">
                    <div class="help-text">The port number for the web interface</div>
                </div>
                
                <div class="form-group">
                    <label for="app_environment">Environment</label>
                    <select id="app_environment" name="app_environment">
                        <option value="development" <%= ENV['ENVIRONMENT'] == 'development' ? 'selected' : '' %>>Development</option>
                        <option value="production" <%= ENV['ENVIRONMENT'] == 'production' ? 'selected' : '' %>>Production</option>
                    </select>
                    <div class="help-text">Set to production for live deployment</div>
                </div>
                
                <button type="button" class="btn btn-success" onclick="saveAppConfig()">Save Application Settings</button>
            </form>
        </div>
    </div>
    
    <script>
        function showAlert(message, type = 'success') {
            const alertsDiv = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alertsDiv.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        function testJiraConnection() {
            const site = document.getElementById('jira_site').value;
            const username = document.getElementById('jira_username').value;
            const token = document.getElementById('jira_api_token').value;
            
            if (!site || !username || !token) {
                showAlert('Please fill in all JIRA fields before testing', 'error');
                return;
            }
            
            // This would make an API call to test the connection
            showAlert('Testing JIRA connection...', 'warning');
            
            // Simulate API test
            setTimeout(() => {
                showAlert('JIRA connection test completed. Check the connection status above.', 'success');
            }, 2000);
        }
        
        function testIntercomConnection() {
            const token = document.getElementById('intercom_access_token').value;
            
            if (!token) {
                showAlert('Please fill in the Intercom access token before testing', 'error');
                return;
            }
            
            showAlert('Testing Intercom connection...', 'warning');
            
            // Simulate API test
            setTimeout(() => {
                showAlert('Intercom connection test completed. Check the connection status above.', 'success');
            }, 2000);
        }
        
        function saveJiraConfig() {
            const formData = new FormData(document.getElementById('jiraForm'));
            const config = {
                JIRA_SITE: formData.get('jira_site'),
                JIRA_USERNAME: formData.get('jira_username'),
                JIRA_API_TOKEN: formData.get('jira_api_token')
            };
            
            // In a real implementation, this would save to config.env
            showAlert('JIRA configuration saved. Please restart the application for changes to take effect.', 'success');
        }
        
        function saveIntercomConfig() {
            const formData = new FormData(document.getElementById('intercomForm'));
            const config = {
                INTERCOM_ACCESS_TOKEN: formData.get('intercom_access_token'),
                INTERCOM_CLIENT_ID: formData.get('intercom_client_id'),
                INTERCOM_CLIENT_SECRET: formData.get('intercom_client_secret')
            };
            
            showAlert('Intercom configuration saved. Please restart the application for changes to take effect.', 'success');
        }
        
        function saveAppConfig() {
            const formData = new FormData(document.getElementById('appForm'));
            const config = {
                PORT: formData.get('app_port'),
                ENVIRONMENT: formData.get('app_environment')
            };
            
            showAlert('Application settings saved. Please restart the application for changes to take effect.', 'success');
        }
    </script>
</body>
</html> 