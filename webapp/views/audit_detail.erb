<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Veracity Audit: <%= @audit[:name] %> - Wiseguy</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            margin-bottom: 30px;
            border-radius: 8px;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        
        .back-link {
            color: #3498db;
            text-decoration: none;
            font-size: 1.1em;
            margin-bottom: 20px;
            display: inline-block;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
        
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #2980b9;
        }
        
        .btn-success {
            background: #27ae60;
        }
        
        .btn-success:hover {
            background: #229954;
        }
        
        .btn-danger {
            background: #e74c3c;
        }
        
        .btn-danger:hover {
            background: #c0392b;
        }
        
        .project-info {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .project-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .stat {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 6px;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #3498db;
        }
        
        .stat-label {
            font-size: 0.9em;
            color: #666;
            margin-top: 5px;
        }
        
        .sections {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }
        
        .section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .section h3 {
            margin-bottom: 15px;
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .file-list {
            list-style: none;
        }
        
        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
            transition: background 0.2s;
        }
        
        .file-item:hover {
            background: #f8f9fa;
        }
        
        .file-item:last-child {
            border-bottom: none;
        }
        
        .file-name {
            font-weight: 500;
            color: #2c3e50;
        }
        
        .file-actions {
            display: flex;
            gap: 10px;
        }
        
        .empty-message {
            text-align: center;
            color: #666;
            padding: 40px 20px;
            font-style: italic;
        }
        
        .upload-section {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .form-group textarea {
            height: 100px;
            resize: vertical;
        }
        
        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 4px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        @media (max-width: 768px) {
            .sections {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê Back to Audits</a>
        
        <div class="header">
            <h1>Veracity Audit: <%= @audit[:name] %></h1>
            <p>Manage files and run analysis for this audit</p>
        </div>
        
        <div id="alerts"></div>
        
        <div class="project-info">
            <div class="project-stats">
                <div class="stat">
                                            <div class="stat-number"><%= @audit[:input_count] %></div>
                        <div class="stat-label">Input Files</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number"><%= @audit[:output_count] %></div>
                        <div class="stat-label">Output Files</div>
                    </div>
                    <div class="stat">
                        <div class="stat-number"><%= @audit[:last_modified] %></div>
                        <div class="stat-label">Last Modified</div>
                    </div>
            </div>
            
            <div style="text-align: center;">
                <button class="btn btn-success" onclick="runAudit('<%= @audit[:name] %>')">Run Audit</button>
                <button class="btn btn-danger" onclick="deleteAudit('<%= @audit[:name] %>')">Delete Audit</button>
            </div>
        </div>
        
        <div class="sections">
            <div class="section">
                <h3>Input Files</h3>
                <% if @audit[:input_files].empty? %>
                    <div class="empty-message">No input files found</div>
                <% else %>
                    <ul class="file-list">
                        <% @audit[:input_files].each do |file| %>
                            <li class="file-item">
                                <span class="file-name"><%= file %></span>
                                <div class="file-actions">
                                    <a href="/file?audit=<%= @audit[:name] %>&type=input&file=<%= file %>" class="btn">View</a>
                                </div>
                            </li>
                        <% end %>
                    </ul>
                <% end %>
                
                <div class="upload-section">
                    <h4>Upload Input File</h4>
                    <form id="uploadInputForm">
                        <div class="form-group">
                            <label for="inputFilename">Filename:</label>
                            <input type="text" id="inputFilename" name="filename" required>
                        </div>
                        <div class="form-group">
                            <label for="inputContent">Content:</label>
                            <textarea id="inputContent" name="content" required></textarea>
                        </div>
                        <button type="submit" class="btn">Upload</button>
                    </form>
                </div>
            </div>
            
            <div class="section">
                <h3>Output Files</h3>
                <% if @audit[:output_files].empty? %>
                    <div class="empty-message">No output files found</div>
                <% else %>
                    <ul class="file-list">
                        <% @audit[:output_files].each do |file| %>
                            <li class="file-item">
                                <span class="file-name"><%= file %></span>
                                <div class="file-actions">
                                    <a href="/file?audit=<%= @audit[:name] %>&type=output&file=<%= file %>" class="btn">View</a>
                                </div>
                            </li>
                        <% end %>
                    </ul>
                <% end %>
                
                <div class="upload-section">
                    <h4>Upload Output File</h4>
                    <form id="uploadOutputForm">
                        <div class="form-group">
                            <label for="outputFilename">Filename:</label>
                            <input type="text" id="outputFilename" name="filename" required>
                        </div>
                        <div class="form-group">
                            <label for="outputContent">Content:</label>
                            <textarea id="outputContent" name="content" required></textarea>
                        </div>
                        <button type="submit" class="btn">Upload</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        function showAlert(message, type = 'success') {
            const alertsDiv = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alertsDiv.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        function runAudit(auditName) {
            const command = prompt('Enter command to run (or leave empty for default):');
            
            fetch('/api/audits/run', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    name: auditName,
                    command: command || null
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`Audit '${auditName}' executed successfully`, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(data.error, 'error');
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'error');
            });
        }
        
        function deleteAudit(auditName) {
            if (confirm(`Are you sure you want to delete audit '${auditName}'?`)) {
                fetch('/api/audits/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name: auditName })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert(data.message, 'success');
                        setTimeout(() => window.location.href = '/', 1000);
                    } else {
                        showAlert(data.error, 'error');
                    }
                })
                .catch(error => {
                    showAlert('Error: ' + error.message, 'error');
                });
            }
        }
        
        // Upload input file
        document.getElementById('uploadInputForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const filename = formData.get('filename');
            const content = formData.get('content');
            
            fetch(`/api/files/upload?audit=<%= @audit[:name] %>&type=input&filename=${filename}`, {
                method: 'POST',
                body: content
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                    e.target.reset();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(data.error, 'error');
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'error');
            });
        });
        
        // Upload output file
        document.getElementById('uploadOutputForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const filename = formData.get('filename');
            const content = formData.get('content');
            
            fetch(`/api/files/upload?audit=<%= @audit[:name] %>&type=output&filename=${filename}`, {
                method: 'POST',
                body: content
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                    e.target.reset();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showAlert(data.error, 'error');
                }
            })
            .catch(error => {
                showAlert('Error: ' + error.message, 'error');
            });
        });
    </script>
</body>
</html> 