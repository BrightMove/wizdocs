<!DOCTYPE html>
<html lang="en" data-theme="system">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Tools - Wiseguy</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        .projects-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: var(--bg-primary);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .projects-table th {
            background: var(--bg-secondary);
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border-primary);
        }
        
        .projects-table td {
            padding: 16px 12px;
            border-bottom: 1px solid var(--border-secondary);
            color: var(--text-primary);
        }
        
        .projects-table tr:hover {
            background: var(--bg-secondary);
        }
        
        .project-type {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .project-type.rfp {
            background: rgba(255, 193, 7, 0.1);
            color: #f57c00;
        }
        
        .project-type.sow {
            background: rgba(76, 175, 80, 0.1);
            color: #388e3c;
        }
        
        .project-type.proposal {
            background: rgba(33, 150, 243, 0.1);
            color: #1976d2;
        }
        
        .action-buttons {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
            text-decoration: none;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-view {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-regenerate {
            background: var(--accent-warning);
            color: white;
        }
        
        .btn-delete {
            background: var(--accent-error);
            color: white;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal-content {
            background-color: var(--bg-primary);
            margin: 5% auto;
            padding: 24px;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .close {
            color: var(--text-secondary);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: var(--text-primary);
        }
        
        .form-row {
            margin-bottom: 16px;
        }
        
        .form-row label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .form-row select,
        .form-row input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 8px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .form-row select:focus,
        .form-row input:focus {
            outline: none;
            border-color: var(--accent-primary);
        }
        
        .modal-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 24px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: var(--text-secondary);
        }
        
        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }
        
        .filters {
            display: flex;
            gap: 16px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .filter-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .filter-group label {
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .filter-group select {
            padding: 8px 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
        }
        
        /* Responsive design for mobile */
        @media (max-width: 768px) {
            .projects-table {
                font-size: 14px;
            }
            
            .projects-table th,
            .projects-table td {
                padding: 12px 8px;
            }
            
            .action-buttons {
                flex-direction: column;
                gap: 4px;
            }
            
            .btn-small {
                padding: 4px 8px;
                font-size: 11px;
            }
            
            .filters {
                flex-direction: column;
                gap: 12px;
            }
            
            .filter-group {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">ü¶â</div>
                    <div class="logo-text">
                        <h1>Wiseguy</h1>
                        <p>Agentic AI Platform</p>
                    </div>
                </div>
                
                <div class="header-actions">
                    <div class="theme-toggle" id="themeToggle" data-theme="system" title="Toggle theme">
                        <span style="position: absolute; top: 50%; left: 6px; transform: translateY(-50%); font-size: 10px;">‚òÄÔ∏è</span>
                        <span style="position: absolute; top: 50%; right: 6px; transform: translateY(-50%); font-size: 10px;">üåô</span>
                    </div>
                </div>
            </div>
            
            <div class="nav-tabs">
                <a href="/" class="nav-tab">Dashboard</a>
                <a href="/sales-tools" class="nav-tab active">Sales Tools</a>
                <a href="/knowledge-base" class="nav-tab">Knowledge Base</a>
                <a href="/audits" class="nav-tab">Audits</a>
                <a href="/settings" class="nav-tab">Settings</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
                         <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
                 <div>
                     <h1 class="section-title">Sales Tools</h1>
                     <p class="section-subtitle">AI-powered tools for RFP responses and Statement of Work generation</p>
                     <p id="projectCount" style="margin: 8px 0 0 0; color: var(--text-secondary); font-size: 14px;">
                         Loading projects...
                     </p>
                 </div>
                 <button onclick="openCreateModal()" class="btn primary">
                     <span style="margin-right: 8px;">‚ûï</span>
                     New Project
                 </button>
             </div>
            
            <!-- Filters -->
            <div class="filters">
                <div class="filter-group">
                    <label>Type:</label>
                    <select id="typeFilter" onchange="filterProjects()">
                        <option value="">All Types</option>
                        <option value="RFP">RFP</option>
                        <option value="SOW">SOW</option>
                        <option value="PROPOSAL">Proposal</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Sort by:</label>
                    <select id="sortFilter" onchange="filterProjects()">
                        <option value="date">Date Created</option>
                        <option value="name">Project Name</option>
                        <option value="type">Project Type</option>
                    </select>
                </div>
            </div>
            
            <!-- Projects Table -->
            <div id="projectsTable">
                <div class="empty-state">
                    <div class="empty-state-icon">üìä</div>
                    <p>Loading projects...</p>
                </div>
            </div>
        </div>
    </main>
    
    <!-- Create Project Modal -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Create New Project</h3>
                <span class="close" onclick="closeCreateModal()">&times;</span>
            </div>
            
            <div class="form-row">
                <label for="projectType">Project Type</label>
                <select id="projectType" required>
                    <option value="">Select project type...</option>
                    <option value="RFP">RFP Response</option>
                    <option value="SOW">Statement of Work</option>
                    <option value="PROPOSAL">Proposal</option>
                </select>
            </div>
            
            <div class="form-row">
                <label for="projectName">Project Name</label>
                <input type="text" id="projectName" placeholder="Enter project name..." required>
            </div>
            
            <div class="modal-actions">
                <button onclick="closeCreateModal()" class="btn secondary">Cancel</button>
                <button onclick="createProject()" class="btn primary">Create Project</button>
            </div>
        </div>
    </div>
    
    <script src="/theme.js"></script>
    <script>
        let allProjects = [];
        
        // Load projects on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAllProjects();
        });
        
        function loadAllProjects() {
            Promise.all([
                fetch('/api/sales-tools/rfp/list').then(r => r.json()),
                fetch('/api/sales-tools/sow/list').then(r => r.json()),
                fetch('/api/sales-tools/proposal/list').then(r => r.json())
            ])
            .then(([rfpProjects, sowProjects, proposalProjects]) => {
                allProjects = [
                    ...rfpProjects.map(p => ({ ...p, type: 'RFP' })),
                    ...sowProjects.map(p => ({ ...p, type: 'SOW' })),
                    ...proposalProjects.map(p => ({ ...p, type: 'PROPOSAL' }))
                ];
                renderProjectsTable();
            })
            .catch(error => {
                console.error('Error loading projects:', error);
                document.getElementById('projectsTable').innerHTML = 
                    '<div class="empty-state"><div class="empty-state-icon">‚ùå</div><p>Error loading projects</p></div>';
            });
        }
        
                 function renderProjectsTable() {
             const container = document.getElementById('projectsTable');
             
             // Update project count
             const projectCountElement = document.getElementById('projectCount');
             if (allProjects.length === 0) {
                 projectCountElement.textContent = 'No projects found';
             } else {
                 const filteredProjects = filterProjectsData();
                 projectCountElement.textContent = `${filteredProjects.length} of ${allProjects.length} projects`;
             }
             
             if (allProjects.length === 0) {
                 container.innerHTML = `
                     <div class="empty-state">
                         <div class="empty-state-icon">üìÅ</div>
                         <p>No projects found</p>
                         <button onclick="openCreateModal()" class="btn primary" style="margin-top: 16px;">Create Your First Project</button>
                     </div>
                 `;
                 return;
             }
            
            const filteredProjects = filterProjectsData();
            
            container.innerHTML = `
                <table class="projects-table">
                    <thead>
                        <tr>
                            <th>Project Name</th>
                            <th>Type</th>
                            <th>Date Created</th>
                            <th>Files</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${filteredProjects.map(project => `
                            <tr>
                                <td>
                                    <div style="font-weight: 500;">${project.name}</div>
                                    <div style="font-size: 12px; color: var(--text-secondary); margin-top: 4px;">
                                        ${project.input_count} input, ${project.output_count} output
                                    </div>
                                </td>
                                <td>
                                    <span class="project-type ${project.type.toLowerCase()}">
                                        ${getTypeIcon(project.type)} ${project.type}
                                    </span>
                                </td>
                                <td>${formatDate(project.last_modified)}</td>
                                <td>
                                    <div style="font-size: 12px;">
                                        <div>üìÅ ${project.input_count} input</div>
                                        <div>üìÑ ${project.output_count} output</div>
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="/sales-tools/${project.type.toLowerCase()}/${project.name}" class="btn-small btn-view">View</a>
                                        <button onclick="regenerateProject('${project.name}', '${project.type}')" class="btn-small btn-regenerate">Regenerate</button>
                                        <button onclick="deleteProject('${project.name}', '${project.type}')" class="btn-small btn-delete">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }
        
        function filterProjectsData() {
            let filtered = [...allProjects];
            
            const typeFilter = document.getElementById('typeFilter').value;
            const sortFilter = document.getElementById('sortFilter').value;
            
            // Filter by type
            if (typeFilter) {
                filtered = filtered.filter(p => p.type === typeFilter);
            }
            
            // Sort
            filtered.sort((a, b) => {
                switch (sortFilter) {
                    case 'name':
                        return a.name.localeCompare(b.name);
                    case 'type':
                        return a.type.localeCompare(b.type);
                    case 'date':
                    default:
                        return new Date(b.last_modified) - new Date(a.last_modified);
                }
            });
            
            return filtered;
        }
        
        function filterProjects() {
            renderProjectsTable();
        }
        
        function getTypeIcon(type) {
            switch (type) {
                case 'RFP': return 'üìã';
                case 'SOW': return 'üìÑ';
                case 'PROPOSAL': return 'üíº';
                default: return 'üìÅ';
            }
        }
        
        function formatDate(dateString) {
            if (!dateString || dateString === 'Unknown') return 'Unknown';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
        }
        
        function openCreateModal() {
            document.getElementById('createModal').style.display = 'block';
            document.getElementById('projectName').focus();
        }
        
        function closeCreateModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('projectType').value = '';
            document.getElementById('projectName').value = '';
        }
        
        function createProject() {
            const projectType = document.getElementById('projectType').value;
            const projectName = document.getElementById('projectName').value.trim();
            
            if (!projectType || !projectName) {
                alert('Please fill in all fields');
                return;
            }
            
            const endpoint = `/api/sales-tools/${projectType.toLowerCase()}/create`;
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: projectName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeCreateModal();
                    loadAllProjects();
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error creating project');
            });
        }
        
        function regenerateProject(projectName, projectType) {
            if (!confirm(`Are you sure you want to regenerate the ${projectType} project "${projectName}"?`)) {
                return;
            }
            
            const endpoint = `/api/sales-tools/${projectType.toLowerCase()}/run-script`;
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: projectName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Project regenerated successfully!');
                    loadAllProjects();
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error regenerating project');
            });
        }
        
        function deleteProject(projectName, projectType) {
            if (!confirm(`Are you sure you want to delete the ${projectType} project "${projectName}"? This action cannot be undone.`)) {
                return;
            }
            
            const endpoint = `/api/sales-tools/${projectType.toLowerCase()}/delete`;
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: projectName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAllProjects();
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting project');
            });
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('createModal');
            if (event.target === modal) {
                closeCreateModal();
            }
        }
    </script>
</body>
</html>
