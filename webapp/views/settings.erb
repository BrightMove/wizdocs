<!DOCTYPE html>
<html lang="en" data-theme="system">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Wiseguy</title>
    <link rel="stylesheet" href="/styles.css?v=3">
    <script src="/theme.js" defer></script>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">ü¶â</div>
                    <div class="logo-text">
                        <h1>Wiseguy</h1>
                        <p>Agentic AI Platform</p>
                    </div>
                </div>
                
                <div class="header-actions">
                    <div class="theme-toggle" id="themeToggle" data-theme="system" title="Toggle theme">
                        <span style="position: absolute; top: 50%; left: 6px; transform: translateY(-50%); font-size: 10px;">‚òÄÔ∏è</span>
                        <span style="position: absolute; top: 50%; right: 6px; transform: translateY(-50%); font-size: 10px;">üåô</span>
                    </div>
                </div>
            </div>
            
            <div class="nav-tabs">
                <a href="/" class="nav-tab">Dashboard</a>
                <a href="/sales-tools" class="nav-tab">Sales Tools</a>
                <a href="/knowledge-base" class="nav-tab">Knowledge Base</a>
                <a href="/audits" class="nav-tab">Audits</a>
                <a href="/settings" class="nav-tab active">Settings</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="container">
            <h1 class="section-title">Settings & Configuration</h1>
            <p class="section-subtitle">Configure and monitor all integrated services and API connections</p>
        
            <!-- Setup Instructions -->
            <div class="card" style="margin-bottom: 40px;">
                <div class="card-header">
                    <div class="card-icon primary">üìã</div>
                    <h3 class="card-title">Setup Instructions</h3>
                </div>
                <div class="card-description">
                    <ol style="padding-left: 20px; line-height: 1.8;">
                        <li><strong>Redis Setup:</strong> Install and start Redis server (brew install redis && brew services start redis)</li>
                        <li><strong>JIRA Setup:</strong> Create an API token in your Atlassian account and configure the JIRA site URL</li>
                        <li><strong>Intercom Setup:</strong> Generate an access token from your Intercom developer settings</li>
                        <li><strong>GitHub Setup:</strong> Create a personal access token in your GitHub account settings</li>
                        <li><strong>Configuration:</strong> Copy <code>config.env.example</code> to <code>config.env</code> and fill in your credentials</li>
                        <li><strong>Test:</strong> Use the test connection buttons below to verify your API access</li>
                    </ol>
                </div>
            </div>
            
            <div id="alerts"></div>
            
            <!-- Settings Grid -->
            <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 24px; margin-bottom: 40px;">
            <!-- JIRA Configuration -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon <%= @jira_connected ? 'success' : 'warning' %>">üé´</div>
                    <div>
                        <h3 class="card-title">JIRA Configuration</h3>
                        <div class="connection-status <%= @jira_connected ? 'connected' : 'disconnected' %>" style="margin-top: 8px;">
                            <% if @jira_connected %>
                                ‚úì Connected to JIRA
                            <% else %>
                                ‚úó Not connected to JIRA
                            <% end %>
                        </div>
                    </div>
                </div>
                
                <form id="jiraForm">
                    <div class="form-group">
                        <label for="jira_site">JIRA Site URL</label>
                        <input type="url" id="jira_site" name="jira_site" class="form-input" placeholder="https://your-domain.atlassian.net" value="<%= ENV['JIRA_SITE'] || '' %>">
                        <div class="help-text">Your JIRA Cloud instance URL</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="jira_username">Email Address</label>
                        <input type="email" id="jira_username" name="jira_username" class="form-input" placeholder="your-email@domain.com" value="<%= ENV['JIRA_USERNAME'] || '' %>">
                        <div class="help-text">The email address associated with your JIRA account</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="jira_api_token">API Token</label>
                        <input type="password" id="jira_api_token" name="jira_api_token" class="form-input" placeholder="Your JIRA API token">
                        <div class="help-text">Generate this in your Atlassian account settings</div>
                    </div>
                    
                    <div class="test-connection" style="margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--border-primary);">
                        <button type="button" class="btn primary" onclick="testJiraConnection()">Test JIRA Connection</button>
                        <button type="button" class="btn success" onclick="saveJiraConfig()">Save JIRA Config</button>
                    </div>
                </form>
            </div>
            
            <!-- Intercom Configuration -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon <%= @intercom_connected ? 'success' : 'warning' %>">üí¨</div>
                    <div>
                        <h3 class="card-title">Intercom Configuration</h3>
                        <div class="connection-status <%= @intercom_connected ? 'connected' : 'disconnected' %>" style="margin-top: 8px;">
                            <% if @intercom_connected %>
                                ‚úì Connected to Intercom
                            <% else %>
                                ‚úó Not connected to Intercom
                            <% end %>
                        </div>
                    </div>
                </div>
                
                <form id="intercomForm">
                    <div class="form-group">
                        <label for="intercom_access_token">Access Token</label>
                        <input type="password" id="intercom_access_token" name="intercom_access_token" class="form-input" placeholder="Your Intercom access token">
                        <div class="help-text">Generate this in your Intercom developer settings</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="intercom_client_id">Client ID (Optional)</label>
                        <input type="text" id="intercom_client_id" name="intercom_client_id" class="form-input" placeholder="Your Intercom client ID" value="<%= ENV['INTERCOM_CLIENT_ID'] || '' %>">
                        <div class="help-text">Required for some advanced features</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="intercom_client_secret">Client Secret (Optional)</label>
                        <input type="password" id="intercom_client_secret" name="intercom_client_secret" class="form-input" placeholder="Your Intercom client secret">
                        <div class="help-text">Required for some advanced features</div>
                    </div>
                    
                    <div class="test-connection" style="margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--border-primary);">
                        <button type="button" class="btn primary" onclick="testIntercomConnection()">Test Intercom Connection</button>
                        <button type="button" class="btn success" onclick="saveIntercomConfig()">Save Intercom Config</button>
                    </div>
                </form>
            </div>
            
            <!-- Redis Configuration -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon <%= @redis_connected ? 'success' : 'warning' %>">üóÑÔ∏è</div>
                    <div>
                        <h3 class="card-title">Redis Configuration</h3>
                        <div class="connection-status <%= @redis_connected ? 'connected' : 'disconnected' %>" style="margin-top: 8px;">
                            <% if @redis_connected %>
                                ‚úì Redis Connected
                                <% if @redis_info %>
                                    <br><small>Database Size: <%= @redis_info[:dbsize] %> keys</small>
                                <% end %>
                            <% else %>
                                ‚úó Redis Not Connected
                                <% if @redis_error %>
                                    <br><small>Error: <%= @redis_error %></small>
                                <% end %>
                            <% end %>
                        </div>
                    </div>
                </div>
                
                <form id="redisForm">
                    <div class="form-group">
                        <label for="redis_url">Redis URL</label>
                        <input type="text" id="redis_url" name="redis_url" class="form-input" placeholder="redis://localhost:6379" value="<%= ENV['REDIS_URL'] || 'redis://localhost:6379' %>">
                        <div class="help-text">Redis connection URL (default: redis://localhost:6379)</div>
                    </div>
                    
                    <div class="test-connection" style="margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--border-primary);">
                        <button type="button" class="btn primary" onclick="testRedisConnection()">Test Redis Connection</button>
                        <button type="button" class="btn success" onclick="saveRedisConfig()">Save Redis Config</button>
                    </div>
                </form>
                
                <% if @redis_connected && @redis_info %>
                <div class="redis-info" style="margin-top: 20px; padding: 20px; background: var(--bg-secondary); border-radius: 12px; border: 1px solid var(--border-primary);">
                    <h4 style="margin-bottom: 12px; color: var(--text-primary);">Redis Information</h4>
                    <div style="font-size: 0.9em; color: var(--text-secondary); line-height: 1.6;">
                        <div><strong>Database Size:</strong> <%= @redis_info[:dbsize] %> keys</div>
                        <div><strong>Memory Usage:</strong> <%= @redis_info[:memory]['used_memory_human'] rescue 'N/A' %></div>
                        <div><strong>Connected Clients:</strong> <%= @redis_info[:memory]['connected_clients'] rescue 'N/A' %></div>
                    </div>
                </div>
                <% end %>
            </div>
            
            <!-- GitHub Configuration -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon <%= @github_connected ? 'success' : 'warning' %>">üêô</div>
                    <div>
                        <h3 class="card-title">GitHub Configuration</h3>
                        <div class="connection-status <%= @github_connected ? 'connected' : 'disconnected' %>" style="margin-top: 8px;">
                            <% if @github_connected %>
                                ‚úì GitHub Token Configured
                            <% else %>
                                ‚úó GitHub Token Not Configured
                            <% end %>
                        </div>
                    </div>
                </div>
                
                <form id="githubForm">
                    <div class="form-group">
                        <label for="github_token">GitHub Personal Access Token</label>
                        <input type="password" id="github_token" name="github_token" class="form-input" placeholder="Your GitHub personal access token">
                        <div class="help-text">Generate this in your GitHub account settings (Settings > Developer settings > Personal access tokens)</div>
                    </div>
                    
                    <div class="test-connection" style="margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--border-primary);">
                        <button type="button" class="btn primary" onclick="testGitHubConnection()">Test GitHub Connection</button>
                        <button type="button" class="btn success" onclick="saveGitHubConfig()">Save GitHub Config</button>
                    </div>
                </form>
            </div>
        </div>
        
            <!-- Application Settings -->
            <div class="card" style="grid-column: 1 / -1;">
                <div class="card-header">
                    <div class="card-icon primary">üîß</div>
                    <h3 class="card-title">Application Settings</h3>
                </div>
                
                <form id="appForm">
                    <div class="form-group">
                        <label for="app_port">Application Port</label>
                        <input type="number" id="app_port" name="app_port" class="form-input" placeholder="3000" value="<%= ENV['PORT'] || '3000' %>">
                        <div class="help-text">The port number for the web interface</div>
                    </div>
                    
                    <div class="form-group">
                        <label for="app_environment">Environment</label>
                        <select id="app_environment" name="app_environment" class="form-input">
                            <option value="development" <%= ENV['ENVIRONMENT'] == 'development' ? 'selected' : '' %>>Development</option>
                            <option value="production" <%= ENV['ENVIRONMENT'] == 'production' ? 'selected' : '' %>>Production</option>
                        </select>
                        <div class="help-text">Set to production for live deployment</div>
                    </div>
                    
                    <button type="button" class="btn success" onclick="saveAppConfig()">Save Application Settings</button>
                </form>
            </div>
        </div>
    </main>
    
    <style>
        .connection-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding: 12px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 14px;
        }
        
        .connection-status.connected {
            background: rgba(16, 185, 129, 0.1);
            color: var(--accent-success);
            border: 1px solid rgba(16, 185, 129, 0.2);
        }
        
        .connection-status.disconnected {
            background: rgba(239, 68, 68, 0.1);
            color: var(--accent-danger);
            border: 1px solid rgba(239, 68, 68, 0.2);
        }
        
        .help-text {
            font-size: 0.9em;
            color: var(--text-secondary);
            margin-top: 6px;
            line-height: 1.4;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
        }
    </style>
    
    <script>
        function showAlert(message, type = 'success') {
            const alertsDiv = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.style.cssText = `
                padding: 16px;
                margin-bottom: 16px;
                border-radius: 12px;
                font-weight: 500;
                border: 1px solid;
                ${type === 'success' ? 'background: var(--accent-success); color: white; border-color: var(--accent-success);' : ''}
                ${type === 'error' ? 'background: var(--accent-danger); color: white; border-color: var(--accent-danger);' : ''}
                ${type === 'warning' ? 'background: var(--accent-warning); color: white; border-color: var(--accent-warning);' : ''}
            `;
            alert.textContent = message;
            alertsDiv.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        function testJiraConnection() {
            const site = document.getElementById('jira_site').value;
            const username = document.getElementById('jira_username').value;
            const token = document.getElementById('jira_api_token').value;
            
            if (!site || !username || !token) {
                showAlert('Please fill in all JIRA fields before testing', 'error');
                return;
            }
            
            // This would make an API call to test the connection
            showAlert('Testing JIRA connection...', 'warning');
            
            // Simulate API test
            setTimeout(() => {
                showAlert('JIRA connection test completed. Check the connection status above.', 'success');
            }, 2000);
        }
        
        function testIntercomConnection() {
            const token = document.getElementById('intercom_access_token').value;
            
            if (!token) {
                showAlert('Please fill in the Intercom access token before testing', 'error');
                return;
            }
            
            showAlert('Testing Intercom connection...', 'warning');
            
            // Simulate API test
            setTimeout(() => {
                showAlert('Intercom connection test completed. Check the connection status above.', 'success');
            }, 2000);
        }
        
        function saveJiraConfig() {
            const formData = new FormData(document.getElementById('jiraForm'));
            const config = {
                JIRA_SITE: formData.get('jira_site'),
                JIRA_USERNAME: formData.get('jira_username'),
                JIRA_API_TOKEN: formData.get('jira_api_token')
            };
            
            // In a real implementation, this would save to config.env
            showAlert('JIRA configuration saved. Please restart the application for changes to take effect.', 'success');
        }
        
        function saveIntercomConfig() {
            const formData = new FormData(document.getElementById('intercomForm'));
            const config = {
                INTERCOM_ACCESS_TOKEN: formData.get('intercom_access_token'),
                INTERCOM_CLIENT_ID: formData.get('intercom_client_id'),
                INTERCOM_CLIENT_SECRET: formData.get('intercom_client_secret')
            };
            
            showAlert('Intercom configuration saved. Please restart the application for changes to take effect.', 'success');
        }
        
        function saveAppConfig() {
            const formData = new FormData(document.getElementById('appForm'));
            const config = {
                PORT: formData.get('app_port'),
                ENVIRONMENT: formData.get('app_environment')
            };
            
            showAlert('Application settings saved. Please restart the application for changes to take effect.', 'success');
        }
        
        function testRedisConnection() {
            const redisUrl = document.getElementById('redis_url').value;
            
            if (!redisUrl) {
                showAlert('Please enter a Redis URL before testing', 'error');
                return;
            }
            
            showAlert('Testing Redis connection...', 'warning');
            
            fetch('/api/settings/test-redis', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ redis_url: redisUrl })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`Redis connection successful! Database size: ${data.info.dbsize} keys`, 'success');
                } else {
                    showAlert(`Redis connection failed: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showAlert(`Error testing Redis connection: ${error.message}`, 'error');
            });
        }
        
        function saveRedisConfig() {
            const formData = new FormData(document.getElementById('redisForm'));
            const config = {
                redis_url: formData.get('redis_url')
            };
            
            fetch('/api/settings/save-redis', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(config)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                } else {
                    showAlert(`Failed to save Redis config: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showAlert(`Error saving Redis config: ${error.message}`, 'error');
            });
        }
        
        function testGitHubConnection() {
            const token = document.getElementById('github_token').value;
            
            if (!token) {
                showAlert('Please enter a GitHub token before testing', 'error');
                return;
            }
            
            showAlert('Testing GitHub connection...', 'warning');
            
            fetch('/api/settings/test-github', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ github_token: token })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`GitHub connection successful! Connected as: ${data.user.login}`, 'success');
                } else {
                    showAlert(`GitHub connection failed: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showAlert(`Error testing GitHub connection: ${error.message}`, 'error');
            });
        }
        
        function saveGitHubConfig() {
            const formData = new FormData(document.getElementById('githubForm'));
            const config = {
                github_token: formData.get('github_token')
            };
            
            fetch('/api/settings/save-github', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(config)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message, 'success');
                } else {
                    showAlert(`Failed to save GitHub config: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                showAlert(`Error saving GitHub config: ${error.message}`, 'error');
            });
        }
    </script>
</body>
</html> 