<!DOCTYPE html>
<html lang="en" data-theme="system">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRM Dashboard - Wiseguy</title>
    <link rel="stylesheet" href="/styles.css">
    <script src="/theme.js" defer></script>
    <style>
        .crm-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .crm-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .crm-tabs {
            display: flex;
            gap: 8px;
            margin-bottom: 24px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .crm-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            border-bottom: 3px solid transparent;
            color: var(--text-secondary);
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .crm-tab.active {
            color: var(--accent-primary);
            border-bottom-color: var(--accent-primary);
        }
        
        .crm-tab:hover {
            color: var(--text-primary);
        }
        
        .crm-content {
            display: none;
        }
        
        .crm-content.active {
            display: block;
        }
        
        .crm-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 24px;
        }
        
        .crm-card {
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .crm-card-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .crm-card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .crm-card-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-add {
            background: var(--accent-primary);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
        }
        
        /* Organizations Table Styles */
        .organizations-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: var(--bg-primary);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .organizations-table th {
            background: var(--bg-secondary);
            padding: 16px 12px;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--border-primary);
        }
        
        .organizations-table td {
            padding: 16px 12px;
            border-bottom: 1px solid var(--border-secondary);
            color: var(--text-primary);
        }
        
        .organizations-table tr:hover {
            background: var(--bg-secondary);
        }
        
        .org-type {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .org-type.taxonomy {
            background: rgba(33, 150, 243, 0.1);
            color: #1976d2;
        }
        
        .org-type.crm {
            background: rgba(76, 175, 80, 0.1);
            color: #388e3c;
        }
        
        .btn-icon {
            background: none;
            border: none;
            cursor: pointer;
            padding: 2px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        
        .btn-icon:hover {
            background: var(--bg-secondary);
        }
        
        .action-buttons {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
            text-decoration: none;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-edit {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        /* Tooltip Styles */
        .tooltip {
            position: fixed;
            background: var(--bg-card);
            border: 1px solid var(--border-primary);
            border-radius: 8px;
            padding: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10000;
            max-width: 400px;
            font-size: 12px;
            pointer-events: auto;
        }
        
        .tooltip-header {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .tooltip-content {
            color: var(--text-secondary);
        }
        
        .tooltip-item {
            margin-bottom: 6px;
            padding: 4px 8px;
            background: var(--bg-secondary);
            border-radius: 4px;
            border: 1px solid var(--border-secondary);
            font-size: 12px;
        }
        
        .btn-add:hover {
            background: var(--accent-primary-dark);
        }
        
        .crm-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .crm-item {
            padding: 12px;
            border: 1px solid var(--border-secondary);
            border-radius: 8px;
            margin-bottom: 8px;
            background: var(--bg-secondary);
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .crm-item:hover {
            border-color: var(--accent-primary);
            background: var(--bg-primary);
        }
        
        .crm-item-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .crm-item-title {
            font-weight: 600;
            color: var(--text-primary);
        }
        
        .crm-item-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }
        
        .crm-item-actions {
            display: flex;
            gap: 4px;
        }
        
        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .btn-edit {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        .pipeline-stages {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }
        
        .pipeline-stage {
            background: var(--bg-primary);
            border: 1px solid var(--border-primary);
            border-radius: 8px;
            padding: 16px;
            text-align: center;
        }
        
        .pipeline-stage-header {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--text-primary);
        }
        
        .pipeline-stage-count {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .pipeline-stage-value {
            font-size: 14px;
            color: var(--text-secondary);
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
        
        .modal-content {
            background-color: var(--bg-primary);
            margin: 5% auto;
            padding: 0;
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }
        
        .close {
            color: var(--text-secondary);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: var(--text-primary);
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .form-textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
            min-height: 100px;
            resize: vertical;
        }
        
        .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-primary);
            border-radius: 6px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 14px;
        }
        
        .modal-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            padding: 20px;
            border-top: 1px solid var(--border-primary);
        }
        
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn-primary {
            background: var(--accent-primary);
            color: white;
        }
        
        .btn-secondary {
            background: var(--bg-secondary);
            color: var(--text-primary);
            border: 1px solid var(--border-primary);
        }
        
        .btn-primary:hover {
            background: var(--accent-primary-dark);
        }
        
        .btn-secondary:hover {
            background: var(--bg-primary);
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }
        
        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }
        
        .filter-btn.active {
            background: var(--accent-primary) !important;
            color: white !important;
            border-color: var(--accent-primary) !important;
        }
        
        .filter-btn:hover {
            background: var(--bg-secondary);
            border-color: var(--accent-primary);
        }
    </style>
</head>
<body>
    <div class="crm-container">
        <div class="crm-header">
            <h1>CRM Dashboard</h1>
            <div class="crm-header-actions">
                <button class="btn btn-primary" onclick="openCreateModal('organization')">New Organization</button>
            </div>
        </div>
        
        <div class="crm-tabs">
            <button class="crm-tab <%= @current_tab == 'overview' ? 'active' : '' %>" onclick="switchTab('overview')">Overview</button>
            <button class="crm-tab <%= @current_tab == 'organizations' ? 'active' : '' %>" onclick="switchTab('organizations')">Organizations</button>
            <button class="crm-tab <%= @current_tab == 'contacts' ? 'active' : '' %>" onclick="switchTab('contacts')">Contacts</button>
            <button class="crm-tab <%= @current_tab == 'activities' ? 'active' : '' %>" onclick="switchTab('activities')">Activities</button>
            <button class="crm-tab <%= @current_tab == 'notes' ? 'active' : '' %>" onclick="switchTab('notes')">Notes</button>
            <button class="crm-tab <%= @current_tab == 'pipeline' ? 'active' : '' %>" onclick="switchTab('pipeline')">Pipeline</button>
        </div>
        
        <!-- Overview Tab -->
        <div id="overview" class="crm-content <%= @current_tab == 'overview' ? 'active' : '' %>">
            <!-- Taxonomy Organizations Overview -->
            <% if defined?(@taxonomy_error) && @taxonomy_error %>
            <div class="crm-card" style="border-color: #dc3545; margin-bottom: 20px;">
                <div class="crm-card-header">
                    <h3 class="crm-card-title" style="color: #dc3545;">⚠️ Taxonomy Error</h3>
                </div>
                <div style="padding: 16px;">
                    <strong>Error:</strong> <%= @taxonomy_error %>
                </div>
            </div>
            <% end %>
            

            
            <div class="crm-grid">
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Pipeline Summary</h3>
                    </div>
                    <div id="pipelineSummary" class="loading">Loading...</div>
                </div>
                
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Recent Activities</h3>
                    </div>
                    <div id="recentActivities" class="loading">Loading...</div>
                </div>
                
                <div class="crm-card">
                    <div class="crm-card-header">
                        <h3 class="crm-card-title">Top Organizations</h3>
                    </div>
                    <div id="topOrganizations" class="loading">Loading...</div>
                </div>
            </div>
        </div>
        
        <!-- Organizations Tab -->
        <div id="organizations" class="crm-content <%= @current_tab == 'organizations' ? 'active' : '' %>">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Organization Management & Content Sources</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('organization')">Add Organization</button>
                        <button class="btn-add" onclick="openOrganizationEditor()">Edit Organizations</button>
                    </div>
                </div>
                <div style="padding: 20px;">
                    <div style="margin-bottom: 20px; color: var(--text-secondary);">
                        Manage organizations and their content sources. You can edit organization settings and register new content sources for each organization.
                    </div>
                    
                    <!-- Organization Type Filter -->
                    <div style="margin-bottom: 20px; padding: 16px; background: var(--bg-secondary); border: 1px solid var(--border-secondary); border-radius: 8px;">
                        <div style="display: flex; align-items: center; gap: 16px; flex-wrap: wrap;">
                            <div style="font-weight: 600; color: var(--text-primary);">Filter by Type:</div>
                            <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                                <a href="/crm?tab=organizations&type=all" class="filter-btn <%= @selected_type == 'all' ? 'active' : '' %>" style="padding: 8px 16px; border-radius: 6px; text-decoration: none; border: 1px solid var(--border-primary); background: var(--bg-primary); color: var(--text-primary); font-size: 14px;">
                                    All Organizations
                                </a>
                                <a href="/crm?tab=organizations&type=Self" class="filter-btn <%= @selected_type == 'Self' ? 'active' : '' %>" style="padding: 8px 16px; border-radius: 6px; text-decoration: none; border: 1px solid var(--border-primary); background: var(--bg-primary); color: var(--text-primary); font-size: 14px;">
                                    🏠 Self
                                </a>
                                <a href="/crm?tab=organizations&type=Customer" class="filter-btn <%= @selected_type == 'Customer' ? 'active' : '' %>" style="padding: 8px 16px; border-radius: 6px; text-decoration: none; border: 1px solid var(--border-primary); background: var(--bg-primary); color: var(--text-primary); font-size: 14px;">
                                    👥 Customer
                                </a>
                                <a href="/crm?tab=organizations&type=Partner/Reseller" class="filter-btn <%= @selected_type == 'Partner/Reseller' ? 'active' : '' %>" style="padding: 8px 16px; border-radius: 6px; text-decoration: none; border: 1px solid var(--border-primary); background: var(--bg-primary); color: var(--text-primary); font-size: 14px;">
                                    🤝 Partner/Reseller
                                </a>
                            </div>
                        </div>
                    </div>
                    

                    
                    <!-- Organization Edit Modal -->
                    <div id="organizationEditModal" class="modal" style="display: none;">
                        <div class="modal-content" style="max-width: 600px;">
                            <div class="modal-header">
                                <h3 id="organizationEditModalTitle">Edit Organization</h3>
                                <span class="close" onclick="closeOrganizationEditModal()">&times;</span>
                            </div>
                            <div class="modal-body">
                                <form id="organizationEditForm">
                                    <input type="hidden" id="editingOrgId" value="">
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 20px;">
                                        <div>
                                            <label for="orgNameEdit" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Organization Name</label>
                                            <input type="text" id="orgNameEdit" class="form-input" style="width: 100%;">
                                        </div>
                                        <div>
                                            <label for="orgDescription" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Description</label>
                                            <input type="text" id="orgDescription" class="form-input" style="width: 100%;">
                                        </div>
                                    </div>
                                    
                                    <div style="margin-bottom: 20px;">
                                        <button type="button" onclick="saveOrganizationChanges()" class="btn-add">Save Changes</button>
                                        <button type="button" onclick="closeOrganizationEditModal()" class="btn-small" style="margin-left: 8px;">Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Content Source Registration Modal -->
                    <div id="contentSourceRegistrationModal" class="modal" style="display: none;">
                        <div class="modal-content" style="max-width: 800px;">
                            <div class="modal-header">
                                <h3 id="contentSourceRegistrationModalTitle">Register Content Source</h3>
                                <span class="close" onclick="closeContentSourceRegistrationModal()">&times;</span>
                            </div>
                            <div class="modal-body">
                                <form id="contentSourceRegistrationForm">
                                    <input type="hidden" id="registeringOrgId" value="">
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-bottom: 20px;">
                                        <div>
                                            <label for="sourceName" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Source Name</label>
                                            <input type="text" id="sourceName" class="form-input" style="width: 100%;" placeholder="e.g., jira_tickets, confluence_docs">
                                        </div>
                                        <div>
                                            <label for="sourceType" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Source Type</label>
                                            <select id="sourceType" class="form-input" style="width: 100%;">
                                                <option value="general">General</option>
                                                <option value="specific">Specific</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label for="sourceVisibility" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Visibility</label>
                                            <select id="sourceVisibility" class="form-input" style="width: 100%;">
                                                <option value="public">Public</option>
                                                <option value="private">Private</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label for="sourceSync" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Sync Strategy</label>
                                            <select id="sourceSync" class="form-input" style="width: 100%;">
                                                <option value="static">Static</option>
                                                <option value="dynamic">Dynamic</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label for="sourceConnector" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Connector</label>
                                            <select id="sourceConnector" class="form-input" style="width: 100%;">
                                                <option value="file_system_connector">File System</option>
                                                <option value="jira_connector">JIRA</option>
                                                <option value="intercom_connector">Intercom</option>
                                                <option value="confluence_connector">Confluence</option>
                                                <option value="github_connector">GitHub</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div style="margin-bottom: 20px;">
                                        <button type="button" onclick="registerContentSource()" class="btn-add">Register Content Source</button>
                                        <button type="button" onclick="closeContentSourceRegistrationModal()" class="btn-small" style="margin-left: 8px;">Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Bind Repository Modal -->
                    <div id="bindRepositoryModal" class="modal" style="display: none;">
                        <div class="modal-content" style="max-width: 900px;">
                            <div class="modal-header">
                                <h3 id="bindRepositoryModalTitle">Bind Content Repository</h3>
                                <span class="close" onclick="closeBindRepositoryModal()">&times;</span>
                            </div>
                            <div class="modal-body">
                                <form id="bindRepoForm">
                                    <input type="hidden" id="bindingOrgId" value="">
                                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin-bottom: 20px;">
                                        <div>
                                            <label for="repoName" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Repository Name</label>
                                            <input type="text" id="repoName" class="form-input" style="width: 100%;" placeholder="e.g., brightmove-docs, company-wiki">
                                        </div>
                                        <div>
                                            <label for="repoType" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Repository Type</label>
                                            <select id="repoType" class="form-input" style="width: 100%;">
                                                <option value="github">GitHub</option>
                                                <option value="gitlab">GitLab</option>
                                                <option value="bitbucket">Bitbucket</option>
                                                <option value="confluence">Confluence</option>
                                                <option value="sharepoint">SharePoint</option>
                                                <option value="notion">Notion</option>
                                                <option value="local">Local Directory</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label for="repoUrl" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Repository URL/Path</label>
                                            <input type="text" id="repoUrl" class="form-input" style="width: 100%;" placeholder="https://github.com/org/repo or /path/to/local/repo">
                                        </div>
                                        <div>
                                            <label for="repoBranch" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Branch/Version</label>
                                            <input type="text" id="repoBranch" class="form-input" style="width: 100%;" placeholder="main, master, or version">
                                        </div>
                                        <div>
                                            <label for="repoAccess" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Access Method</label>
                                            <select id="repoAccess" class="form-input" style="width: 100%;">
                                                <option value="public">Public</option>
                                                <option value="token">Access Token</option>
                                                <option value="ssh">SSH Key</option>
                                                <option value="oauth">OAuth</option>
                                            </select>
                                        </div>
                                        <div>
                                            <label for="repoCredentials" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Credentials (if needed)</label>
                                            <input type="password" id="repoCredentials" class="form-input" style="width: 100%;" placeholder="Access token, SSH key, or OAuth token">
                                        </div>
                                    </div>
                                    
                                    <div style="margin-bottom: 20px;">
                                        <label for="repoDescription" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Description</label>
                                        <textarea id="repoDescription" class="form-input" style="width: 100%; height: 80px;" placeholder="Describe the purpose and content of this repository"></textarea>
                                    </div>
                                    
                                    <div style="margin-bottom: 20px;">
                                        <label style="display: block; margin-bottom: 8px; font-weight: 600; color: var(--text-primary);">Sync Options</label>
                                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
                                            <div>
                                                <input type="checkbox" id="autoSync" checked>
                                                <label for="autoSync" style="margin-left: 8px; font-weight: normal;">Auto-sync on changes</label>
                                            </div>
                                            <div>
                                                <input type="checkbox" id="syncHistory" checked>
                                                <label for="syncHistory" style="margin-left: 8px; font-weight: normal;">Include commit history</label>
                                            </div>
                                            <div>
                                                <input type="checkbox" id="syncMetadata" checked>
                                                <label for="syncMetadata" style="margin-left: 8px; font-weight: normal;">Preserve metadata</label>
                                            </div>
                                            <div>
                                                <input type="checkbox" id="syncAttachments">
                                                <label for="syncAttachments" style="margin-left: 8px; font-weight: normal;">Include attachments</label>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div style="margin-bottom: 20px;">
                                        <button type="button" onclick="bindContentRepo()" class="btn-add">Bind Repository</button>
                                        <button type="button" onclick="testRepoConnection()" class="btn-small" style="margin-left: 8px;">Test Connection</button>
                                        <button type="button" onclick="closeBindRepositoryModal()" class="btn-small" style="margin-left: 8px;">Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Content Source Management Modal -->
                    <div id="contentSourceModal" class="modal" style="display: none;">
                        <div class="modal-content" style="max-width: 800px;">
                            <div class="modal-header">
                                <h3 id="contentSourceModalTitle">Manage Content Sources</h3>
                                <span class="close" onclick="closeContentSourceModal()">&times;</span>
                            </div>
                            <div class="modal-body">
                                <div style="margin-bottom: 20px;">
                                    <button class="btn-add" onclick="showAddContentSourceForm()">➕ Add New Content Source</button>
                                </div>
                                
                                <!-- Content Sources List -->
                                <div id="contentSourcesList" style="margin-bottom: 20px;">
                                    <!-- Content sources will be loaded here -->
                                </div>
                                
                                <!-- Add/Edit Content Source Form -->
                                <div id="contentSourceForm" style="display: none;">
                                    <h4 id="contentSourceFormTitle">Add Content Source</h4>
                                    <form id="contentSourceFormElement">
                                        <input type="hidden" id="contentSourceOrgId" value="">
                                        <input type="hidden" id="contentSourceId" value="">
                                        <input type="hidden" id="contentSourceMode" value="add">
                                        
                                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin-bottom: 20px;">
                                            <div>
                                                <label for="contentSourceName" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Source Name</label>
                                                <input type="text" id="contentSourceName" class="form-input" style="width: 100%;" placeholder="e.g., intercom_tickets, jira_issues">
                                            </div>
                                            <div>
                                                <label for="contentSourceType" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Source Type</label>
                                                <select id="contentSourceType" class="form-input" style="width: 100%;">
                                                    <option value="general">General</option>
                                                    <option value="specific">Specific</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label for="contentSourceVisibility" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Visibility</label>
                                                <select id="contentSourceVisibility" class="form-input" style="width: 100%;">
                                                    <option value="public">Public</option>
                                                    <option value="private">Private</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label for="contentSourceSync" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Sync Strategy</label>
                                                <select id="contentSourceSync" class="form-input" style="width: 100%;">
                                                    <option value="static">Static</option>
                                                    <option value="dynamic">Dynamic</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label for="contentSourceConnector" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Connector</label>
                                                <select id="contentSourceConnector" class="form-input" style="width: 100%;">
                                                    <option value="file_system_connector">File System</option>
                                                    <option value="intercom_connector">Intercom</option>
                                                    <option value="jira_connector">Jira</option>
                                                    <option value="github_connector">GitHub</option>
                                                    <option value="confluence_connector">Confluence</option>
                                                    <option value="wiseguy_connector">Wiseguy</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label for="contentSourceUrl" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Source URL/Path</label>
                                                <input type="text" id="contentSourceUrl" class="form-input" style="width: 100%;" placeholder="URL or file path">
                                            </div>
                                        </div>
                                        
                                        <div style="margin-bottom: 20px;">
                                            <label for="contentSourceDescription" style="display: block; margin-bottom: 4px; font-weight: 600; color: var(--text-primary);">Description</label>
                                            <textarea id="contentSourceDescription" class="form-input" style="width: 100%; height: 80px;" placeholder="Describe this content source"></textarea>
                                        </div>
                                        
                                        <div style="margin-bottom: 20px;">
                                            <button type="button" onclick="saveContentSource()" class="btn-add">Save Content Source</button>
                                            <button type="button" onclick="cancelContentSourceForm()" class="btn-small" style="margin-left: 8px;">Cancel</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                                        <!-- Organizations Table -->
                    <div id="organizationsTable" style="margin-top: 20px;">
                        <% if defined?(@crm_organizations) && @crm_organizations.any? %>
                        <table class="organizations-table">
                            <thead>
                                <tr>
                                    <th>Organization</th>
                                    <th>Type</th>
                                    <th>Details</th>
                                    <th>Content Sources</th>
                                    <th>Bound Repositories</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% @crm_organizations.each do |org| %>
                                <tr>
                                    <td>
                                        <div style="display: flex; align-items: center; gap: 8px;">
                                            <span style="font-size: 18px;">
                                                <%= org['organization_id'] == '0' ? '🏠' : '🏢' %>
                                            </span>
                                            <div>
                                                <div style="font-weight: 600; color: var(--text-primary);">
                                                    <%= org['name'] %>
                                                </div>
                                                <div style="font-size: 12px; color: var(--text-secondary);">
                                                    <%= org['description'] %>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <% if org['organization_types'] && org['organization_types'].any? %>
                                            <div style="display: flex; flex-direction: column; gap: 2px;">
                                                <% org['organization_types'].each do |type| %>
                                                    <% if type == 'Self' %>
                                                        <span class="org-type self" style="background: #4caf50; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 500;">🏠 Self</span>
                                                    <% elsif type == 'Customer' %>
                                                        <span class="org-type customer" style="background: #2196f3; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 500;">👥 Customer</span>
                                                    <% elsif type == 'Partner/Reseller' %>
                                                        <span class="org-type partner" style="background: #ff9800; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 500;">🤝 Partner</span>
                                                    <% else %>
                                                        <span class="org-type other" style="background: #9e9e9e; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 500;"><%= type %></span>
                                                    <% end %>
                                                <% end %>
                                            </div>
                                        <% else %>
                                            <span class="org-type unknown" style="background: #9e9e9e; color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 500;">Unknown</span>
                                        <% end %>
                                    </td>
                                    <td>
                                        <% if org['organization_type'] == 'taxonomy' %>
                                            <div style="font-size: 12px; color: var(--text-secondary);">
                                                ID: <%= org['organization_id'] %>
                                            </div>
                                        <% else %>
                                            <div style="font-size: 12px; color: var(--text-secondary);">
                                                Industry: <%= org['industry'] %>
                                            </div>
                                        <% end %>
                                    </td>
                                    <td>
                                        <% if org['content_sources'] && org['content_sources'].any? %>
                                            <div style="display: flex; align-items: center; gap: 4px;">
                                                <span style="font-size: 14px;">📁</span>
                                                <span style="font-size: 12px; color: var(--text-secondary);">
                                                    <%= org['content_source_count'] || 0 %> sources
                                                </span>
                                                <button class="btn-icon" onclick="showContentSourcesTooltip('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="View Content Sources">
                                                    <span style="font-size: 12px;">ℹ️</span>
                                                </button>
                                            </div>
                                        <% else %>
                                            <span style="font-size: 12px; color: var(--text-secondary);">-</span>
                                        <% end %>
                                    </td>
                                    <td>
                                        <% if org['bound_repositories'] && org['bound_repositories'].any? %>
                                            <div style="display: flex; align-items: center; gap: 4px;">
                                                <span style="font-size: 14px;">🔗</span>
                                                <span style="font-size: 12px; color: var(--text-secondary);">
                                                    <%= org['bound_repo_count'] || 0 %> repos
                                                </span>
                                                <button class="btn-icon" onclick="showBoundReposTooltip('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="View Bound Repositories">
                                                    <span style="font-size: 12px;">ℹ️</span>
                                                </button>
                                            </div>
                                        <% else %>
                                            <span style="font-size: 12px; color: var(--text-secondary);">-</span>
                                        <% end %>
                                    </td>
                                    <td>
                                        <div style="font-size: 12px; color: var(--text-secondary);">
                                            <%= org['created_at'] ? org['created_at'].split('T')[0] : '-' %>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <% if org['organization_type'] == 'taxonomy' %>
                                                <button class="btn-small btn-edit" onclick="editOrganization('<%= org['organization_id'] %>')" title="Edit Organization">
                                                    ✏️
                                                </button>
                                                <button class="btn-small btn-edit" onclick="manageContentSources('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="Manage Content Sources">
                                                    📁
                                                </button>
                                                <button class="btn-small btn-edit" onclick="bindContentRepoForOrg('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="Bind Repository">
                                                    🔗
                                                </button>
                                            <% else %>
                                                <button class="btn-small btn-edit" onclick="editCRMOrganization('<%= org['organization_id'] %>')" title="Edit CRM Organization">
                                                    ✏️
                                                </button>
                                                <button class="btn-small btn-edit" onclick="manageContentSources('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="Manage Content Sources">
                                                    📁
                                                </button>
                                                <button class="btn-small btn-edit" onclick="bindContentRepoForOrg('<%= org['organization_id'] %>', '<%= org['name'] %>')" title="Bind Repository">
                                                    🔗
                                                </button>
                                                <button class="btn-small btn-delete" onclick="deleteCRMOrganization('<%= org['organization_id'] %>')" title="Delete CRM Organization">
                                                    🗑️
                                                </button>
                                            <% end %>
                                        </div>
                                    </td>
                                </tr>
                                <% end %>
                            </tbody>
                        </table>
                        
                        <!-- Organization 0 Special Section -->
                        <% org_0 = @crm_organizations.find { |org| org['organization_id'] == '0' } %>
                        <% if org_0 %>
                        <div class="crm-item" style="background: var(--bg-primary); border: 1px solid var(--border-primary); margin-top: 20px;">
                            <div style="padding: 20px;">
                                <h4 style="margin: 0 0 16px 0; color: var(--text-primary); font-size: 16px; font-weight: 600;">
                                    🏠 Organization 0 (BrightMove) - Content Source Details
                                </h4>
                                
                                <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;">
                                    <% rfp_source = org_0['content_sources']&.find { |s| s['name'] == 'rfp_projects' } %>
                                    <% if rfp_source %>
                                    <div style="background: var(--bg-secondary); padding: 12px; border-radius: 6px; border: 1px solid var(--border-secondary);">
                                        <div style="font-weight: 600; color: #f57c00; margin-bottom: 4px;">RFP Projects</div>
                                        <div style="font-size: 12px; color: var(--text-secondary);">
                                            Type: <%= rfp_source['type'] %><br>
                                            Visibility: <%= rfp_source['visibility'] %><br>
                                            Sync: <%= rfp_source['sync_strategy'] %>
                                        </div>
                                    </div>
                                    <% end %>
                                    
                                    <% sow_source = org_0['content_sources']&.find { |s| s['name'] == 'sow_projects' } %>
                                    <% if sow_source %>
                                    <div style="background: var(--bg-secondary); padding: 12px; border-radius: 6px; border: 1px solid var(--border-secondary);">
                                        <div style="font-weight: 600; color: #388e3c; margin-bottom: 4px;">SOW Projects</div>
                                        <div style="font-size: 12px; color: var(--text-secondary);">
                                            Type: <%= sow_source['type'] %><br>
                                            Visibility: <%= sow_source['visibility'] %><br>
                                            Sync: <%= sow_source['sync_strategy'] %>
                                        </div>
                                    </div>
                                    <% end %>
                                    
                                    <% proposal_source = org_0['content_sources']&.find { |s| s['name'] == 'proposal_projects' } %>
                                    <% if proposal_source %>
                                    <div style="background: var(--bg-secondary); padding: 12px; border-radius: 6px; border: 1px solid var(--border-secondary);">
                                        <div style="font-weight: 600; color: #1976d2; margin-bottom: 4px;">Proposal Projects</div>
                                        <div style="font-size: 12px; color: var(--text-secondary);">
                                            Type: <%= proposal_source['type'] %><br>
                                            Visibility: <%= proposal_source['visibility'] %><br>
                                            Sync: <%= proposal_source['sync_strategy'] %>
                                        </div>
                                    </div>
                                    <% end %>
                                </div>
                            </div>
                        </div>
                        <% end %>
                        
                        <% else %>
                        <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                            No organizations found. Create your first organization to get started.
                        </div>
                        <% end %>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Contacts Tab -->
        <div id="contacts" class="crm-content <%= @current_tab == 'contacts' ? 'active' : '' %>">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Contacts</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('contact')">Add Contact</button>
                    </div>
                </div>
                <div id="contactsList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Activities Tab -->
        <div id="activities" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Activities</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('activity')">Add Activity</button>
                    </div>
                </div>
                <div id="activitiesList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Notes Tab -->
        <div id="notes" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Notes</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('note')">Add Note</button>
                    </div>
                </div>
                <div id="notesList" class="crm-list loading">Loading...</div>
            </div>
        </div>
        
        <!-- Pipeline Tab -->
        <div id="pipeline" class="crm-content">
            <div class="crm-card">
                <div class="crm-card-header">
                    <h3 class="crm-card-title">Sales Pipeline</h3>
                    <div class="crm-card-actions">
                        <button class="btn-add" onclick="openCreateModal('pipeline')">Add Pipeline Entry</button>
                    </div>
                </div>
                <div id="pipelineStages" class="pipeline-stages loading">Loading...</div>
                <div id="pipelineEntries" class="crm-list loading">Loading...</div>
            </div>
        </div>
    </div>
    
    <!-- Modals -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Create New</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Modal content will be dynamically loaded -->
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button class="btn btn-primary" onclick="saveItem()">Save</button>
            </div>
        </div>
    </div>
    
    <script>
        let currentTab = 'overview';
        let currentModalType = null;
        let organizations = [];
        let contacts = [];
        let activities = [];
        let notes = [];
        let pipelineEntries = [];
        let pipelineStages = {};
        
        // Initialize CRM Dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
            
            // Set the correct tab based on URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const tabParam = urlParams.get('tab');
            if (tabParam) {
                // Set the correct tab
                switchTabFromParam(tabParam);
            }
        });
        
        function switchTabFromParam(tabName) {
            // Update tab buttons
            document.querySelectorAll('.crm-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Find and activate the correct tab button by onclick attribute
            const tabButtons = document.querySelectorAll('.crm-tab');
            tabButtons.forEach(button => {
                const onclick = button.getAttribute('onclick');
                if (onclick && onclick.includes(`'${tabName}'`)) {
                    button.classList.add('active');
                }
            });
            
            // Update content
            document.querySelectorAll('.crm-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            currentTab = tabName;
            
            // Load data for the selected tab
            switch(tabName) {
                case 'organizations':
                    loadOrganizations();
                    break;
                case 'contacts':
                    loadContacts();
                    break;
                case 'activities':
                    loadActivities();
                    break;
                case 'notes':
                    loadNotes();
                    break;
                case 'pipeline':
                    loadPipeline();
                    break;
            }
        }
        
        function switchTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.crm-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Update content
            document.querySelectorAll('.crm-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            currentTab = tabName;
            
            // Update URL parameters to preserve tab state
            const url = new URL(window.location);
            url.searchParams.set('tab', tabName);
            
            // Preserve existing type filter if on organizations tab
            if (tabName === 'organizations') {
                const currentType = url.searchParams.get('type') || 'all';
                url.searchParams.set('type', currentType);
            }
            
            // Update URL without reloading the page
            window.history.pushState({}, '', url);
            
            // Load data for the selected tab
            switch(tabName) {
                case 'organizations':
                    loadOrganizations();
                    break;
                case 'contacts':
                    loadContacts();
                    break;
                case 'activities':
                    loadActivities();
                    break;
                case 'notes':
                    loadNotes();
                    break;
                case 'pipeline':
                    loadPipeline();
                    break;
            }
        }
        
        function loadDashboardData() {
            loadPipelineSummary();
            loadRecentActivities();
            loadTopOrganizations();
        }
        
        function loadPipelineSummary() {
            fetch('/api/crm/pipeline/summary')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('pipelineSummary');
                    container.innerHTML = `
                        <div style="text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--accent-primary);">
                                $${data.total_value.toLocaleString()}
                            </div>
                            <div style="color: var(--text-secondary); margin-bottom: 16px;">
                                Total Pipeline Value
                            </div>
                            <div style="font-size: 18px; font-weight: 600;">
                                ${data.total_entries} Active Deals
                            </div>
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error loading pipeline summary:', error);
                    document.getElementById('pipelineSummary').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadRecentActivities() {
            fetch('/api/crm/activities')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('recentActivities');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No recent activities</div>';
                        return;
                    }
                    
                    const recentActivities = data.slice(0, 5);
                    container.innerHTML = recentActivities.map(activity => `
                        <div class="crm-item">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${activity.subject}</div>
                                <div class="crm-item-meta">${formatDate(activity.date)}</div>
                            </div>
                            <div style="color: var(--text-secondary); font-size: 14px;">
                                ${activity.type} - ${activity.description}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading recent activities:', error);
                    document.getElementById('recentActivities').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadTopOrganizations() {
            fetch('/api/crm/organizations')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('topOrganizations');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No organizations</div>';
                        return;
                    }
                    
                    const topOrgs = data.slice(0, 5);
                    container.innerHTML = topOrgs.map(org => `
                        <div class="crm-item">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${org.name}</div>
                                <div class="crm-item-meta">${org.industry || 'N/A'}</div>
                            </div>
                            <div style="color: var(--text-secondary); font-size: 14px;">
                                ${org.employee_count ? org.employee_count + ' employees' : 'N/A'}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading top organizations:', error);
                    document.getElementById('topOrganizations').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadOrganizations() {
            // Organizations are now server-side rendered with taxonomy data
            // No need to load via JavaScript as the content is already in the DOM
            console.log('Organizations loaded from server-side taxonomy data');
        }
        
        function loadContacts() {
            fetch('/api/crm/contacts')
                .then(response => response.json())
                .then(data => {
                    contacts = data;
                    const container = document.getElementById('contactsList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No contacts found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(contact => `
                        <div class="crm-item" onclick="editItem('contact', '${contact.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${contact.first_name} ${contact.last_name}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('contact', '${contact.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('contact', '${contact.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${contact.title || 'N/A'} • ${contact.email || 'N/A'}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading contacts:', error);
                    document.getElementById('contactsList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadActivities() {
            fetch('/api/crm/activities')
                .then(response => response.json())
                .then(data => {
                    activities = data;
                    const container = document.getElementById('activitiesList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No activities found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(activity => `
                        <div class="crm-item" onclick="editItem('activity', '${activity.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${activity.subject}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('activity', '${activity.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('activity', '${activity.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${activity.type} • ${formatDate(activity.date)}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading activities:', error);
                    document.getElementById('activitiesList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadNotes() {
            fetch('/api/crm/notes')
                .then(response => response.json())
                .then(data => {
                    notes = data;
                    const container = document.getElementById('notesList');
                    if (data.length === 0) {
                        container.innerHTML = '<div class="empty-state">No notes found</div>';
                        return;
                    }
                    
                    container.innerHTML = data.map(note => `
                        <div class="crm-item" onclick="editItem('note', '${note.id}')">
                            <div class="crm-item-header">
                                <div class="crm-item-title">${note.title}</div>
                                <div class="crm-item-actions">
                                    <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('note', '${note.id}')">Edit</button>
                                    <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('note', '${note.id}')">Delete</button>
                                </div>
                            </div>
                            <div class="crm-item-meta">
                                ${note.category || 'N/A'} • ${formatDate(note.created_at)}
                            </div>
                        </div>
                    `).join('');
                })
                .catch(error => {
                    console.error('Error loading notes:', error);
                    document.getElementById('notesList').innerHTML = '<div class="empty-state">Error loading data</div>';
                });
        }
        
        function loadPipeline() {
            Promise.all([
                fetch('/api/crm/pipeline/stages').then(r => r.json()),
                fetch('/api/crm/pipeline/entries').then(r => r.json())
            ]).then(([stages, entries]) => {
                pipelineStages = stages;
                pipelineEntries = entries;
                
                // Load pipeline stages
                const stagesContainer = document.getElementById('pipelineStages');
                stagesContainer.innerHTML = Object.entries(stages).map(([key, stage]) => `
                    <div class="pipeline-stage" style="border-left: 4px solid ${stage.color}">
                        <div class="pipeline-stage-header">${stage.name}</div>
                        <div class="pipeline-stage-count">
                            ${entries.filter(entry => entry.stage === key).length}
                        </div>
                        <div class="pipeline-stage-value">
                            $${entries.filter(entry => entry.stage === key).reduce((sum, entry) => sum + (entry.value || 0), 0).toLocaleString()}
                        </div>
                    </div>
                `).join('');
                
                // Load pipeline entries
                const entriesContainer = document.getElementById('pipelineEntries');
                if (entries.length === 0) {
                    entriesContainer.innerHTML = '<div class="empty-state">No pipeline entries found</div>';
                    return;
                }
                
                entriesContainer.innerHTML = entries.map(entry => `
                    <div class="crm-item" onclick="editItem('pipeline', '${entry.id}')">
                        <div class="crm-item-header">
                            <div class="crm-item-title">$${entry.value ? entry.value.toLocaleString() : '0'}</div>
                            <div class="crm-item-actions">
                                <button class="btn-small btn-edit" onclick="event.stopPropagation(); editItem('pipeline', '${entry.id}')">Edit</button>
                                <button class="btn-small btn-delete" onclick="event.stopPropagation(); deleteItem('pipeline', '${entry.id}')">Delete</button>
                            </div>
                        </div>
                        <div class="crm-item-meta">
                            ${stages[entry.stage]?.name || entry.stage} • ${entry.expected_close_date ? formatDate(entry.expected_close_date) : 'No close date'}
                        </div>
                    </div>
                `).join('');
            }).catch(error => {
                console.error('Error loading pipeline:', error);
                document.getElementById('pipelineStages').innerHTML = '<div class="empty-state">Error loading data</div>';
                document.getElementById('pipelineEntries').innerHTML = '<div class="empty-state">Error loading data</div>';
            });
        }
        
        function openCreateModal(type) {
            currentModalType = type;
            const modal = document.getElementById('createModal');
            const title = document.getElementById('modalTitle');
            const body = document.getElementById('modalBody');
            
            title.textContent = `Create New ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            body.removeAttribute('data-editing-id');
            
            loadFormTemplate(type);
            modal.style.display = 'block';
        }
        
        function loadFormTemplate(type, item = null) {
            const body = document.getElementById('modalBody');
            
            switch(type) {
                case 'organization':
                    body.innerHTML = getOrganizationForm();
                    if (item) {
                        populateOrganizationForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'contact':
                    body.innerHTML = getContactForm();
                    if (item) {
                        populateContactForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'activity':
                    body.innerHTML = getActivityForm();
                    if (item) {
                        populateActivityForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'note':
                    body.innerHTML = getNoteForm();
                    if (item) {
                        populateNoteForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
                case 'pipeline':
                    body.innerHTML = getPipelineForm();
                    if (item) {
                        populatePipelineForm(item);
                        body.setAttribute('data-editing-id', item.id);
                    }
                    break;
            }
        }
        
        function getOrganizationForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Organization Name *</label>
                    <input type="text" id="orgName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Organization Type(s) *</label>
                    <div style="display: flex; flex-direction: column; gap: 8px;">
                        <label style="display: flex; align-items: center; gap: 8px; font-weight: normal;">
                            <input type="checkbox" id="orgTypeSelf" value="Self">
                            🏠 Self
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; font-weight: normal;">
                            <input type="checkbox" id="orgTypeCustomer" value="Customer" checked>
                            👥 Customer
                        </label>
                        <label style="display: flex; align-items: center; gap: 8px; font-weight: normal;">
                            <input type="checkbox" id="orgTypePartner" value="Partner/Reseller">
                            🤝 Partner/Reseller
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">Industry</label>
                    <input type="text" id="orgIndustry" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Website</label>
                    <input type="url" id="orgWebsite" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" id="orgEmail" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Phone</label>
                    <input type="tel" id="orgPhone" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Address</label>
                    <textarea id="orgAddress" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Annual Revenue</label>
                    <input type="number" id="orgRevenue" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Employee Count</label>
                    <input type="number" id="orgEmployees" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="orgNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function populateOrganizationForm(org) {
            document.getElementById('orgName').value = org.name || '';
            
            // Set organization types
            const orgTypes = org.organization_types || [];
            document.getElementById('orgTypeSelf').checked = orgTypes.includes('Self');
            document.getElementById('orgTypeCustomer').checked = orgTypes.includes('Customer');
            document.getElementById('orgTypePartner').checked = orgTypes.includes('Partner/Reseller');
            
            document.getElementById('orgIndustry').value = org.industry || '';
            document.getElementById('orgWebsite').value = org.website || '';
            document.getElementById('orgEmail').value = org.email || '';
            document.getElementById('orgPhone').value = org.phone || '';
            document.getElementById('orgAddress').value = org.address || '';
            document.getElementById('orgRevenue').value = org.annual_revenue || '';
            document.getElementById('orgEmployees').value = org.employee_count || '';
            document.getElementById('orgNotes').value = org.notes || '';
        }
        
        function getContactForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Organization</label>
                    <select id="contactOrg" class="form-select">
                        <option value="">Select Organization</option>
                        ${organizations.map(org => `<option value="${org.id}">${org.name}</option>`).join('')}
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">First Name *</label>
                    <input type="text" id="contactFirstName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Last Name *</label>
                    <input type="text" id="contactLastName" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Title</label>
                    <input type="text" id="contactTitle" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" id="contactEmail" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Phone</label>
                    <input type="tel" id="contactPhone" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Mobile</label>
                    <input type="tel" id="contactMobile" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">LinkedIn</label>
                    <input type="url" id="contactLinkedIn" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Primary Contact</label>
                    <input type="checkbox" id="contactPrimary">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="contactNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function getActivityForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Subject *</label>
                    <input type="text" id="activitySubject" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Type</label>
                    <select id="activityType" class="form-select">
                        <option value="call">Phone Call</option>
                        <option value="email">Email</option>
                        <option value="meeting">Meeting</option>
                        <option value="presentation">Presentation</option>
                        <option value="proposal">Proposal</option>
                        <option value="follow_up">Follow Up</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea id="activityDescription" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Date</label>
                    <input type="datetime-local" id="activityDate" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Duration (minutes)</label>
                    <input type="number" id="activityDuration" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Outcome</label>
                    <textarea id="activityOutcome" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Next Action</label>
                    <input type="text" id="activityNextAction" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Next Action Date</label>
                    <input type="date" id="activityNextActionDate" class="form-input">
                </div>
            `;
        }
        
        function getNoteForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Title *</label>
                    <input type="text" id="noteTitle" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Content</label>
                    <textarea id="noteContent" class="form-textarea"></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Category</label>
                    <select id="noteCategory" class="form-select">
                        <option value="general">General</option>
                        <option value="meeting">Meeting</option>
                        <option value="proposal">Proposal</option>
                        <option value="follow_up">Follow Up</option>
                        <option value="competition">Competition</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Private Note</label>
                    <input type="checkbox" id="notePrivate">
                </div>
            `;
        }
        
        function getPipelineForm() {
            return `
                <div class="form-group">
                    <label class="form-label">Stage *</label>
                    <select id="pipelineStage" class="form-select" required>
                        ${Object.entries(pipelineStages).map(([key, stage]) => 
                            `<option value="${key}">${stage.name} (${stage.probability}%)</option>`
                        ).join('')}
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Value *</label>
                    <input type="number" id="pipelineValue" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Currency</label>
                    <select id="pipelineCurrency" class="form-select">
                        <option value="USD">USD</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Expected Close Date</label>
                    <input type="date" id="pipelineCloseDate" class="form-input">
                </div>
                <div class="form-group">
                    <label class="form-label">Notes</label>
                    <textarea id="pipelineNotes" class="form-textarea"></textarea>
                </div>
            `;
        }
        
        function populateContactForm(contact) {
            document.getElementById('contactOrg').value = contact.organization_id || '';
            document.getElementById('contactFirstName').value = contact.first_name || '';
            document.getElementById('contactLastName').value = contact.last_name || '';
            document.getElementById('contactTitle').value = contact.title || '';
            document.getElementById('contactEmail').value = contact.email || '';
            document.getElementById('contactPhone').value = contact.phone || '';
            document.getElementById('contactMobile').value = contact.mobile || '';
            document.getElementById('contactLinkedIn').value = contact.linkedin || '';
            document.getElementById('contactPrimary').checked = contact.is_primary || false;
            document.getElementById('contactNotes').value = contact.notes || '';
        }
        
        function populateActivityForm(activity) {
            document.getElementById('activitySubject').value = activity.subject || '';
            document.getElementById('activityType').value = activity.type || '';
            document.getElementById('activityDescription').value = activity.description || '';
            document.getElementById('activityDate').value = activity.date ? activity.date.split('T')[0] : '';
            document.getElementById('activityDuration').value = activity.duration || '';
            document.getElementById('activityOutcome').value = activity.outcome || '';
            document.getElementById('activityNextAction').value = activity.next_action || '';
            document.getElementById('activityNextActionDate').value = activity.next_action_date ? activity.next_action_date.split('T')[0] : '';
        }
        
        function populateNoteForm(note) {
            document.getElementById('noteTitle').value = note.title || '';
            document.getElementById('noteContent').value = note.content || '';
            document.getElementById('noteCategory').value = note.category || '';
            document.getElementById('notePrivate').checked = note.is_private || false;
        }
        
        function populatePipelineForm(entry) {
            document.getElementById('pipelineStage').value = entry.stage || '';
            document.getElementById('pipelineValue').value = entry.value || '';
            document.getElementById('pipelineCurrency').value = entry.currency || 'USD';
            document.getElementById('pipelineCloseDate').value = entry.expected_close_date ? entry.expected_close_date.split('T')[0] : '';
            document.getElementById('pipelineNotes').value = entry.notes || '';
        }
        
        function closeModal() {
            document.getElementById('createModal').style.display = 'none';
            document.getElementById('modalBody').removeAttribute('data-editing-id');
            currentModalType = null;
        }
        
        function saveItem() {
            // Add a small delay to ensure form fields are rendered
            setTimeout(() => {
                const data = getFormData();
                if (!data) return;
                
                console.log('Saving data:', data);
                
                // Check if we're editing an existing item
                const editingId = document.getElementById('modalBody').getAttribute('data-editing-id');
                let url = `/api/crm/${currentModalType}s`;
                let method = 'POST';
                
                if (editingId) {
                    url = `/api/crm/${currentModalType}s/${editingId}`;
                    method = 'PUT';
                    console.log('Editing item with ID:', editingId);
                }
                
                console.log('Making request to:', url, 'with method:', method);
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.error) {
                    alert('Error: ' + result.error);
                } else {
                    closeModal();
                    // Reload the page to show updated data, preserving current tab
                    const currentUrl = new URL(window.location);
                    const currentTab = currentUrl.searchParams.get('tab') || 'overview';
                    const currentType = currentUrl.searchParams.get('type') || 'all';
                    
                    // Build reload URL with current parameters
                    let reloadUrl = '/crm?tab=' + currentTab;
                    if (currentTab === 'organizations' && currentType !== 'all') {
                        reloadUrl += '&type=' + currentType;
                    }
                    
                    window.location.href = reloadUrl;
                }
            })
            .catch(error => {
                console.error('Error saving item:', error);
                alert('Error saving item');
            });
            }, 100); // Small delay to ensure form fields are rendered
        }
        
        function getFormData() {
            switch(currentModalType) {
                case 'organization':
                    // Get selected organization types
                    const orgTypes = [];
                    if (document.getElementById('orgTypeSelf').checked) orgTypes.push('Self');
                    if (document.getElementById('orgTypeCustomer').checked) orgTypes.push('Customer');
                    if (document.getElementById('orgTypePartner').checked) orgTypes.push('Partner/Reseller');
                    
                    const nameField = document.getElementById('orgName');
                    console.log('All form fields in modal:', document.getElementById('modalBody').innerHTML);
                    console.log('Organization name field:', nameField);
                    
                    if (!nameField) {
                        console.error('Organization name field not found!');
                        alert('Organization name field not found. Please try again.');
                        return null;
                    }
                    
                    const name = nameField.value.trim();
                    console.log('Organization name value:', name);
                    console.log('Organization name length:', name.length);
                    
                    // Validation
                    if (!name) {
                        alert('Organization name is required');
                        if (nameField) nameField.focus();
                        return null;
                    }
                    
                    if (orgTypes.length === 0) {
                        alert('Please select at least one organization type');
                        return null;
                    }
                    
                    return {
                        name: name,
                        organization_types: orgTypes,
                        industry: document.getElementById('orgIndustry').value,
                        website: document.getElementById('orgWebsite').value,
                        email: document.getElementById('orgEmail').value,
                        phone: document.getElementById('orgPhone').value,
                        address: document.getElementById('orgAddress').value,
                        annual_revenue: document.getElementById('orgRevenue').value,
                        employee_count: document.getElementById('orgEmployees').value,
                        notes: document.getElementById('orgNotes').value
                    };
                case 'contact':
                    return {
                        organization_id: document.getElementById('contactOrg').value,
                        first_name: document.getElementById('contactFirstName').value,
                        last_name: document.getElementById('contactLastName').value,
                        title: document.getElementById('contactTitle').value,
                        email: document.getElementById('contactEmail').value,
                        phone: document.getElementById('contactPhone').value,
                        mobile: document.getElementById('contactMobile').value,
                        linkedin: document.getElementById('contactLinkedIn').value,
                        is_primary: document.getElementById('contactPrimary').checked,
                        notes: document.getElementById('contactNotes').value
                    };
                case 'activity':
                    return {
                        subject: document.getElementById('activitySubject').value,
                        type: document.getElementById('activityType').value,
                        description: document.getElementById('activityDescription').value,
                        date: document.getElementById('activityDate').value,
                        duration: document.getElementById('activityDuration').value,
                        outcome: document.getElementById('activityOutcome').value,
                        next_action: document.getElementById('activityNextAction').value,
                        next_action_date: document.getElementById('activityNextActionDate').value
                    };
                case 'note':
                    return {
                        title: document.getElementById('noteTitle').value,
                        content: document.getElementById('noteContent').value,
                        category: document.getElementById('noteCategory').value,
                        is_private: document.getElementById('notePrivate').checked
                    };
                case 'pipeline':
                    return {
                        stage: document.getElementById('pipelineStage').value,
                        value: document.getElementById('pipelineValue').value,
                        currency: document.getElementById('pipelineCurrency').value,
                        expected_close_date: document.getElementById('pipelineCloseDate').value,
                        notes: document.getElementById('pipelineNotes').value
                    };
            }
        }
        
        function editItem(type, id) {
            currentModalType = type;
            const item = getItemById(type, id);
            if (!item) {
                alert('Item not found');
                return;
            }
            
            // Set modal title
            document.getElementById('modalTitle').textContent = `Edit ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            
            // Load form template and populate with data
            loadFormTemplate(type, item);
            
            // Show modal
            document.getElementById('createModal').style.display = 'block';
        }
        
        function getItemById(type, id) {
            switch(type) {
                case 'organization':
                    return organizations.find(org => org.id === id);
                case 'contact':
                    return contacts.find(contact => contact.id === id);
                case 'activity':
                    return activities.find(activity => activity.id === id);
                case 'note':
                    return notes.find(note => note.id === id);
                case 'pipeline':
                    return pipelineEntries.find(entry => entry.id === id);
                default:
                    return null;
            }
        }
        
        function deleteItem(type, id) {
            if (!confirm(`Are you sure you want to delete this ${type}?`)) {
                return;
            }
            
            fetch(`/api/crm/${type}s/${id}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Reload the page to show updated data, preserving current tab
                    const currentUrl = new URL(window.location);
                    const currentTab = currentUrl.searchParams.get('tab') || 'overview';
                    const currentType = currentUrl.searchParams.get('type') || 'all';
                    
                    // Build reload URL with current parameters
                    let reloadUrl = '/crm?tab=' + currentTab;
                    if (currentTab === 'organizations' && currentType !== 'all') {
                        reloadUrl += '&type=' + currentType;
                    }
                    
                    window.location.href = reloadUrl;
                } else {
                    alert('Error deleting item');
                }
            })
            .catch(error => {
                console.error('Error deleting item:', error);
                alert('Error deleting item');
            });
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        // Organization Management Functions
        function openOrganizationEditor() {
            // Switch to organizations tab
            switchTab('organizations');
        }
        
        function editOrganization(orgId) {
            // Fetch organization data
            fetch(`/api/organizations`)
                .then(response => response.json())
                .then(organizations => {
                    const org = organizations.find(o => o.organization_id === orgId);
                    if (org) {
                        // Populate the edit form
                        document.getElementById('editingOrgId').value = org.organization_id;
                        document.getElementById('organizationEditModalTitle').textContent = `Edit Organization - ${org.name}`;
                        document.getElementById('orgName').value = org.name;
                        document.getElementById('orgDescription').value = org.description;
                        
                        // Show the modal
                        document.getElementById('organizationEditModal').style.display = 'block';
                    } else {
                        alert('Organization not found');
                    }
                })
                .catch(error => {
                    console.error('Error fetching organization:', error);
                    alert('Error loading organization data');
                });
        }
        
        function editCRMOrganization(orgId) {
            // Fetch CRM organization data
            fetch(`/api/crm/organizations`)
                .then(response => response.json())
                .then(organizations => {
                    const org = organizations.find(o => o.id === orgId);
                    if (org) {
                        // Open the create modal in edit mode
                        openCreateModal('organization');
                        
                        // Populate the form with existing data
                        document.getElementById('orgName').value = org.name || '';
                        document.getElementById('orgIndustry').value = org.industry || '';
                        document.getElementById('orgWebsite').value = org.website || '';
                        document.getElementById('orgEmail').value = org.email || '';
                        document.getElementById('orgPhone').value = org.phone || '';
                        document.getElementById('orgAddress').value = org.address || '';
                        document.getElementById('orgRevenue').value = org.annual_revenue || '';
                        document.getElementById('orgEmployees').value = org.employee_count || '';
                        document.getElementById('orgNotes').value = org.notes || '';
                        
                        // Set organization types
                        const orgTypes = org.organization_types || [];
                        document.getElementById('orgTypeSelf').checked = orgTypes.includes('Self');
                        document.getElementById('orgTypeCustomer').checked = orgTypes.includes('Customer');
                        document.getElementById('orgTypePartner').checked = orgTypes.includes('Partner/Reseller');
                        
                        // Set the modal to edit mode
                        document.getElementById('modalTitle').textContent = `Edit Organization - ${org.name}`;
                        document.getElementById('modalBody').setAttribute('data-editing-id', org.id);
                    } else {
                        alert('CRM Organization not found');
                    }
                })
                .catch(error => {
                    console.error('Error fetching CRM organization:', error);
                    alert('Error loading CRM organization data');
                });
        }
        
        function deleteCRMOrganization(orgId) {
            // Use the existing deleteItem function for CRM organizations
            deleteItem('organization', orgId);
        }
        
        function saveOrganizationChanges() {
            const orgId = document.getElementById('editingOrgId').value;
            const orgName = document.getElementById('orgName').value;
            const orgDescription = document.getElementById('orgDescription').value;
            
            if (!orgName.trim()) {
                alert('Organization name is required');
                return;
            }
            
            // Make API call to update the organization
            fetch(`/api/organizations/${orgId}/update`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: orgName,
                    description: orgDescription
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert(`Organization "${orgName}" updated successfully!`);
                    closeOrganizationEditModal();
                    // Reload the page to show updated data
                    location.reload();
                } else {
                    alert('Error updating organization: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error updating organization:', error);
                alert('Error updating organization');
            });
        }
        
        function closeOrganizationEditModal() {
            document.getElementById('organizationEditModal').style.display = 'none';
            document.getElementById('editingOrgId').value = '';
            document.getElementById('orgName').value = '';
            document.getElementById('orgDescription').value = '';
        }
        
        function registerContentSourceForOrg(orgId, orgName) {
            // Populate the registration form
            document.getElementById('registeringOrgId').value = orgId;
            document.getElementById('contentSourceRegistrationModalTitle').textContent = `Register Content Source - ${orgName}`;
            
            // Clear form fields
            document.getElementById('sourceName').value = '';
            document.getElementById('sourceType').value = 'general';
            document.getElementById('sourceVisibility').value = 'private';
            document.getElementById('sourceSync').value = 'static';
            document.getElementById('sourceConnector').value = 'file_system_connector';
            
            // Show the modal
            document.getElementById('contentSourceRegistrationModal').style.display = 'block';
        }
        
        function registerContentSource() {
            const orgId = document.getElementById('registeringOrgId').value;
            const sourceName = document.getElementById('sourceName').value;
            const sourceType = document.getElementById('sourceType').value;
            const sourceVisibility = document.getElementById('sourceVisibility').value;
            const sourceSync = document.getElementById('sourceSync').value;
            const sourceConnector = document.getElementById('sourceConnector').value;
            
            if (!sourceName.trim()) {
                alert('Source name is required');
                return;
            }
            
            // Make API call to register the content source
            fetch(`/api/organizations/${orgId}/content-sources`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: sourceName,
                    type: sourceType,
                    visibility: sourceVisibility,
                    sync_strategy: sourceSync,
                    connector: sourceConnector
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert(`Content source "${sourceName}" registered successfully!`);
                    closeContentSourceRegistrationModal();
                    // Reload the page to show updated data
                    location.reload();
                } else {
                    alert('Error registering content source: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error registering content source:', error);
                alert('Error registering content source');
            });
        }
        
        function closeContentSourceRegistrationModal() {
            document.getElementById('contentSourceRegistrationModal').style.display = 'none';
            document.getElementById('registeringOrgId').value = '';
            document.getElementById('sourceName').value = '';
            document.getElementById('sourceType').value = 'general';
            document.getElementById('sourceVisibility').value = 'private';
            document.getElementById('sourceSync').value = 'static';
            document.getElementById('sourceConnector').value = 'file_system_connector';
        }
        
        // Tooltip Functions
        function showContentSourcesTooltip(orgId, orgName) {
            console.log('showContentSourcesTooltip called for:', orgId, orgName);
            
            // Remove any existing tooltips first
            const existingTooltips = document.querySelectorAll('.tooltip');
            existingTooltips.forEach(tooltip => tooltip.remove());
            
            // Show loading state
            const tooltip = createTooltip();
            tooltip.innerHTML = `
                <div class="tooltip-header">📁 Content Sources - ${orgName}</div>
                <div class="tooltip-content">
                    <div class="tooltip-item">Loading...</div>
                </div>
            `;
            
            // Position tooltip near the clicked button
            const button = event.target;
            const rect = button.getBoundingClientRect();
            tooltip.style.left = rect.right + 10 + 'px';
            tooltip.style.top = rect.top + 'px';
            
            console.log('Positioning tooltip at:', tooltip.style.left, tooltip.style.top);
            document.body.appendChild(tooltip);
            
            // Get organization data from the server
            fetch(`/api/organizations/${orgId}/content-sources`)
                .then(response => {
                    console.log('API response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(sources => {
                    console.log('Content sources received:', sources);
                    tooltip.innerHTML = `
                        <div class="tooltip-header">📁 Content Sources - ${orgName}</div>
                        <div class="tooltip-content">
                            ${sources.length > 0 ? sources.map(source => `
                                <div class="tooltip-item">
                                    <strong>${source.name}</strong><br>
                                    Type: ${source.type} | Visibility: ${source.visibility} | Sync: ${source.sync_strategy}
                                    ${source.description ? `<br><em>${source.description}</em>` : ''}
                                </div>
                            `).join('') : '<div class="tooltip-item">No content sources found</div>'}
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error loading content sources:', error);
                    tooltip.innerHTML = `
                        <div class="tooltip-header">📁 Content Sources - ${orgName}</div>
                        <div class="tooltip-content">
                            <div class="tooltip-item" style="color: #dc3545;">Error loading content sources</div>
                        </div>
                    `;
                });
            
            // Remove tooltip when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function removeTooltip(e) {
                    if (!tooltip.contains(e.target) && e.target !== button) {
                        tooltip.remove();
                        document.removeEventListener('click', removeTooltip);
                    }
                });
            }, 100);
        }
        
        function showBoundReposTooltip(orgId, orgName) {
            // Remove any existing tooltips first
            const existingTooltips = document.querySelectorAll('.tooltip');
            existingTooltips.forEach(tooltip => tooltip.remove());
            
            // Show loading state
            const tooltip = createTooltip();
            tooltip.innerHTML = `
                <div class="tooltip-header">🔗 Bound Repositories - ${orgName}</div>
                <div class="tooltip-content">
                    <div class="tooltip-item">Loading...</div>
                </div>
            `;
            
            // Position tooltip near the clicked button
            const button = event.target;
            const rect = button.getBoundingClientRect();
            tooltip.style.left = rect.right + 10 + 'px';
            tooltip.style.top = rect.top + 'px';
            
            document.body.appendChild(tooltip);
            
            // Get bound repositories data from the server
            fetch(`/api/organizations/${orgId}/bound-repos`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(repos => {
                    tooltip.innerHTML = `
                        <div class="tooltip-header">🔗 Bound Repositories - ${orgName}</div>
                        <div class="tooltip-content">
                            ${repos.length > 0 ? repos.map(repo => `
                                <div class="tooltip-item">
                                    <strong>${repo.repo_name}</strong> (${repo.repo_type})<br>
                                    URL: ${repo.repo_url}<br>
                                    Branch: ${repo.repo_branch} | Access: ${repo.repo_access}
                                    ${repo.repo_description ? `<br><em>${repo.repo_description}</em>` : ''}
                                </div>
                            `).join('') : '<div class="tooltip-item">No bound repositories found</div>'}
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error loading bound repositories:', error);
                    tooltip.innerHTML = `
                        <div class="tooltip-header">🔗 Bound Repositories - ${orgName}</div>
                        <div class="tooltip-content">
                            <div class="tooltip-item" style="color: #dc3545;">Error loading bound repositories</div>
                        </div>
                    `;
                });
            
            // Remove tooltip when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function removeTooltip(e) {
                    if (!tooltip.contains(e.target) && e.target !== button) {
                        tooltip.remove();
                        document.removeEventListener('click', removeTooltip);
                    }
                });
            }, 100);
        }
        
        function createTooltip() {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            return tooltip;
        }
        
        // Content Source Management Functions
        function manageContentSources(orgId, orgName) {
            document.getElementById('contentSourceOrgId').value = orgId;
            document.getElementById('contentSourceModalTitle').textContent = `Manage Content Sources - ${orgName}`;
            document.getElementById('contentSourceModal').style.display = 'block';
            loadContentSourcesList(orgId);
        }
        
        function closeContentSourceModal() {
            document.getElementById('contentSourceModal').style.display = 'none';
            document.getElementById('contentSourceForm').style.display = 'none';
            document.getElementById('contentSourcesList').innerHTML = '';
        }
        
        function loadContentSourcesList(orgId) {
            fetch(`/api/organizations/${orgId}/content-sources`)
                .then(response => response.json())
                .then(sources => {
                    const container = document.getElementById('contentSourcesList');
                    if (sources.length === 0) {
                        container.innerHTML = '<div style="text-align: center; padding: 20px; color: var(--text-secondary);">No content sources found. Add your first content source to get started.</div>';
                        return;
                    }
                    
                    container.innerHTML = `
                        <h4 style="margin: 0 0 16px 0; color: var(--text-primary);">Content Sources (${sources.length})</h4>
                        <div style="display: grid; gap: 12px;">
                            ${sources.map(source => `
                                <div style="background: var(--bg-secondary); border: 1px solid var(--border-secondary); border-radius: 8px; padding: 16px;">
                                    <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 8px;">
                                        <div>
                                            <div style="font-weight: 600; color: var(--text-primary);">${source.name}</div>
                                            <div style="font-size: 12px; color: var(--text-secondary);">
                                                Type: ${source.type} | Visibility: ${source.visibility} | Sync: ${source.sync_strategy}
                                            </div>
                                        </div>
                                        <div style="display: flex; gap: 8px;">
                                            <button class="btn-small btn-edit" onclick="editContentSource('${orgId}', '${source.name}')" title="Edit">
                                                ✏️
                                            </button>
                                            <button class="btn-small btn-delete" onclick="deleteContentSource('${orgId}', '${source.name}')" title="Delete">
                                                🗑️
                                            </button>
                                        </div>
                                    </div>
                                    <div style="font-size: 12px; color: var(--text-secondary);">
                                        ${source.description || 'No description'}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                })
                .catch(error => {
                    console.error('Error loading content sources:', error);
                    document.getElementById('contentSourcesList').innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545;">Error loading content sources</div>';
                });
        }
        
        function showAddContentSourceForm() {
            document.getElementById('contentSourceForm').style.display = 'block';
            document.getElementById('contentSourceFormTitle').textContent = 'Add Content Source';
            document.getElementById('contentSourceMode').value = 'add';
            document.getElementById('contentSourceId').value = '';
            
            // Clear form
            document.getElementById('contentSourceName').value = '';
            document.getElementById('contentSourceType').value = 'general';
            document.getElementById('contentSourceVisibility').value = 'private';
            document.getElementById('contentSourceSync').value = 'static';
            document.getElementById('contentSourceConnector').value = 'file_system_connector';
            document.getElementById('contentSourceUrl').value = '';
            document.getElementById('contentSourceDescription').value = '';
        }
        
        function editContentSource(orgId, sourceName) {
            fetch(`/api/organizations/${orgId}/content-sources/${encodeURIComponent(sourceName)}`)
                .then(response => response.json())
                .then(source => {
                    document.getElementById('contentSourceForm').style.display = 'block';
                    document.getElementById('contentSourceFormTitle').textContent = 'Edit Content Source';
                    document.getElementById('contentSourceMode').value = 'edit';
                    document.getElementById('contentSourceId').value = sourceName;
                    
                    // Populate form
                    document.getElementById('contentSourceName').value = source.name || '';
                    document.getElementById('contentSourceType').value = source.type || 'general';
                    document.getElementById('contentSourceVisibility').value = source.visibility || 'private';
                    document.getElementById('contentSourceSync').value = source.sync_strategy || 'static';
                    document.getElementById('contentSourceConnector').value = source.connector || 'file_system_connector';
                    document.getElementById('contentSourceUrl').value = source.url || '';
                    document.getElementById('contentSourceDescription').value = source.description || '';
                })
                .catch(error => {
                    console.error('Error loading content source:', error);
                    alert('Error loading content source details');
                });
        }
        
        function saveContentSource() {
            const orgId = document.getElementById('contentSourceOrgId').value;
            const mode = document.getElementById('contentSourceMode').value;
            const sourceId = document.getElementById('contentSourceId').value;
            
            const sourceData = {
                name: document.getElementById('contentSourceName').value,
                type: document.getElementById('contentSourceType').value,
                visibility: document.getElementById('contentSourceVisibility').value,
                sync_strategy: document.getElementById('contentSourceSync').value,
                connector: document.getElementById('contentSourceConnector').value,
                url: document.getElementById('contentSourceUrl').value,
                description: document.getElementById('contentSourceDescription').value
            };
            
            if (!sourceData.name.trim()) {
                alert('Source name is required');
                return;
            }
            
            const url = mode === 'add' 
                ? `/api/organizations/${orgId}/content-sources`
                : `/api/organizations/${orgId}/content-sources/${encodeURIComponent(sourceId)}`;
            
            const method = mode === 'add' ? 'POST' : 'PUT';
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(sourceData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert(mode === 'add' ? 'Content source added successfully!' : 'Content source updated successfully!');
                    cancelContentSourceForm();
                    loadContentSourcesList(orgId);
                } else {
                    alert('Error: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error saving content source:', error);
                alert('Error saving content source');
            });
        }
        
        function deleteContentSource(orgId, sourceName) {
            if (!confirm(`Are you sure you want to delete the content source "${sourceName}"?`)) {
                return;
            }
            
            fetch(`/api/organizations/${orgId}/content-sources/${encodeURIComponent(sourceName)}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('Content source deleted successfully!');
                    loadContentSourcesList(orgId);
                } else {
                    alert('Error: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error deleting content source:', error);
                alert('Error deleting content source');
            });
        }
        
        function cancelContentSourceForm() {
            document.getElementById('contentSourceForm').style.display = 'none';
        }
        
        // Bind Content Repository Functions
        function bindContentRepoForOrg(orgId, orgName) {
            // Populate the bind repo form
            document.getElementById('bindingOrgId').value = orgId;
            document.getElementById('bindRepositoryModalTitle').textContent = `Bind Content Repository - ${orgName}`;
            
            // Clear form fields
            document.getElementById('repoName').value = '';
            document.getElementById('repoType').value = 'github';
            document.getElementById('repoUrl').value = '';
            document.getElementById('repoBranch').value = 'main';
            document.getElementById('repoAccess').value = 'public';
            document.getElementById('repoCredentials').value = '';
            document.getElementById('repoDescription').value = '';
            document.getElementById('autoSync').checked = true;
            document.getElementById('syncHistory').checked = true;
            document.getElementById('syncMetadata').checked = true;
            document.getElementById('syncAttachments').checked = false;
            
            // Show the modal
            document.getElementById('bindRepositoryModal').style.display = 'block';
        }
        
        function bindContentRepo() {
            const orgId = document.getElementById('bindingOrgId').value;
            const repoName = document.getElementById('repoName').value;
            const repoType = document.getElementById('repoType').value;
            const repoUrl = document.getElementById('repoUrl').value;
            const repoBranch = document.getElementById('repoBranch').value;
            const repoAccess = document.getElementById('repoAccess').value;
            const repoCredentials = document.getElementById('repoCredentials').value;
            const repoDescription = document.getElementById('repoDescription').value;
            const autoSync = document.getElementById('autoSync').checked;
            const syncHistory = document.getElementById('syncHistory').checked;
            const syncMetadata = document.getElementById('syncMetadata').checked;
            const syncAttachments = document.getElementById('syncAttachments').checked;
            
            if (!repoName.trim() || !repoUrl.trim()) {
                alert('Repository name and URL are required');
                return;
            }
            
            // Make API call to bind the content repository
            fetch(`/api/organizations/${orgId}/bind-repo`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    repo_name: repoName,
                    repo_type: repoType,
                    repo_url: repoUrl,
                    repo_branch: repoBranch,
                    repo_access: repoAccess,
                    repo_credentials: repoCredentials,
                    repo_description: repoDescription,
                    auto_sync: autoSync,
                    sync_history: syncHistory,
                    sync_metadata: syncMetadata,
                    sync_attachments: syncAttachments
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert(`Repository "${repoName}" bound successfully!`);
                    closeBindRepositoryModal();
                    // Reload the page to show updated data
                    location.reload();
                } else {
                    alert('Error binding repository: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error binding repository:', error);
                alert('Error binding repository');
            });
        }
        
        function testRepoConnection() {
            const repoType = document.getElementById('repoType').value;
            const repoUrl = document.getElementById('repoUrl').value;
            const repoAccess = document.getElementById('repoAccess').value;
            const repoCredentials = document.getElementById('repoCredentials').value;
            
            if (!repoUrl.trim()) {
                alert('Repository URL is required for testing');
                return;
            }
            
            // Make API call to test the repository connection
            fetch('/api/repos/test-connection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    repo_type: repoType,
                    repo_url: repoUrl,
                    repo_access: repoAccess,
                    repo_credentials: repoCredentials
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('✅ Connection successful! Repository is accessible.');
                } else {
                    alert('❌ Connection failed: ' + (result.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error testing connection:', error);
                alert('Error testing repository connection');
            });
        }
        
        function closeBindRepositoryModal() {
            document.getElementById('bindRepositoryModal').style.display = 'none';
            document.getElementById('bindingOrgId').value = '';
            document.getElementById('repoName').value = '';
            document.getElementById('repoType').value = 'github';
            document.getElementById('repoUrl').value = '';
            document.getElementById('repoBranch').value = 'main';
            document.getElementById('repoAccess').value = 'public';
            document.getElementById('repoCredentials').value = '';
            document.getElementById('repoDescription').value = '';
            document.getElementById('autoSync').checked = true;
            document.getElementById('syncHistory').checked = true;
            document.getElementById('syncMetadata').checked = true;
            document.getElementById('syncAttachments').checked = false;
        }
        
        function cancelBindRepo() {
            closeBindRepositoryModal();
        }
        
        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = [
                'createModal',
                'organizationEditModal',
                'contentSourceRegistrationModal',
                'bindRepositoryModal',
                'contentSourceModal'
            ];
            
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (event.target === modal) {
                    switch(modalId) {
                        case 'createModal':
                            closeModal();
                            break;
                        case 'organizationEditModal':
                            closeOrganizationEditModal();
                            break;
                        case 'contentSourceRegistrationModal':
                            closeContentSourceRegistrationModal();
                            break;
                        case 'bindRepositoryModal':
                            closeBindRepositoryModal();
                            break;
                        case 'contentSourceModal':
                            closeContentSourceModal();
                            break;
                    }
                }
            });
        }
    </script>
</body>
</html>
